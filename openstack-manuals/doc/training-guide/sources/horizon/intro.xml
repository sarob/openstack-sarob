<?xml version="1.0" encoding="utf-8"?>
  <section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0"
  xml:id="Introducing-Horizon">
<title>Introducing Horizon</title>
<section xml:id="values">
  <title>Values</title>
  <blockquote>
<section xml:id="page-abstract">
<title>Page Abstract</title>
<para>      &quot;Think simple&quot; as my old master used to say - meaning
      reduce the whole of its parts into the simplest terms, getting
      back to first principles.
    </para>
    <para>
      -- Frank Lloyd Wright
    </para>
  </blockquote>
  <para>
    Horizon holds several key values at the core of its design and
    architecture:
  </para>
  <blockquote>
    <itemizedlist>
      <listitem>
        <para>
          Core Support: Out-of-the-box support for all core OpenStack
          projects.
        </para>
      </listitem>
      <listitem>
        <para>
          Extensible: Anyone can add a new component as a
          &quot;first-class citizen&quot;.
        </para>
      </listitem>
      <listitem>
        <para>
          Manageable: The core codebase should be simple and
          easy-to-navigate.
        </para>
      </listitem>
      <listitem>
        <para>
          Consistent: Visual and interaction paradigms are maintained
          throughout.
        </para>
      </listitem>
      <listitem>
        <para>
          Stable: A reliable API with an emphasis on
          backwards-compatibility.
        </para>
      </listitem>
      <listitem>
        <para>
          Usable: Providing an <emphasis>awesome</emphasis> interface
          that people <emphasis>want</emphasis> to use.
        </para>
      </listitem>
    </itemizedlist>
  </blockquote>
  <para>
    The only way to attain and uphold those ideals is to make it
    <emphasis>easy</emphasis> for developers to implement those values.
  </para>
</sect1>
</section>
<section xml:id="history">
  <title>History</title>
  <para>
    Horizon started life as a single app to manage OpenStack's compute
    project. As such, all it needed was a set of views, templates, and
    API calls.
  </para>
  <para>
    From there it grew to support multiple OpenStack projects and APIs
    gradually, arranged rigidly into &quot;dash&quot; and
    &quot;syspanel&quot; groupings.
  </para>
  <para>
    During the &quot;Diablo&quot; release cycle an initial plugin system
    was added using signals to hook in additional URL patterns and add
    links into the &quot;dash&quot; and &quot;syspanel&quot; navigation.
  </para>
  <para>
    This incremental growth served the goal of &quot;Core Support&quot;
    phenomenally, but left &quot;Extensible&quot; and
    &quot;Manageable&quot; behind. And while the other key values took
    shape of their own accord, it was time to re-architect for an
    extensible, modular future.
  </para>
</section>
<section xml:id="the-current-architecture-how-it-meets-our-values">
  <title>The Current Architecture &amp; How It Meets Our Values</title>
  <para>
    At its core, <emphasis role="strong">Horizon should be a
    registration pattern for applications to hook into</emphasis>.
    Here's what that means and how it is implemented in terms of our
    values:
  </para>
<section xml:id="core-support">
    <title>Core Support</title>
    <para>
      Horizon ships with three central dashboards, a &quot;User
      Dashboard&quot;, a &quot;System Dashboard&quot;, and a
      &quot;Settings&quot; dashboard. Between these three they cover the
      core OpenStack applications and deliver on Core Support.
    </para>
    <para>
      The Horizon application also ships with a set of API abstractions
      for the core OpenStack projects in order to provide a consistent,
      stable set of reusable methods for developers. Using these
      abstractions, developers working on Horizon don't need to be
      intimately familiar with the APIs of each OpenStack project.
    </para>
</section>
<section xml:id="extensible">
    <title>Extensible</title>
    <para>
      A Horizon dashboard application is based around the
      ~horizon.Dashboard class that provides a consistent API and set of
      capabilities for both core OpenStack dashboard apps shipped with
      Horizon and equally for third-party apps. The ~horizon.Dashboard
      class is treated as a top-level navigation item.
    </para>
    <para>
      Should a developer wish to provide functionality within an
      existing dashboard (e.g. adding a monitoring panel to the user
      dashboard) the simple registration pattern makes it possible to
      write an app which hooks into other dashboards just as easily as
      creating a new dashboard. All you have to do is import the
      dashboard you wish to modify.
    </para>
</section>
<section xml:id="manageable">
    <title>Manageable</title>
    <para>
      Within the application, there is a simple method for registering a
      ~horizon.Panel (sub-navigation items). Each panel contains the
      necessary logic (views, forms, tests, etc.) for that interface.
      This granular breakdown prevents files (such as
      <literal>api.py</literal>) from becoming thousands of lines long
      and makes code easy to find by correlating it directly to the
      navigation.
    </para>
</section>
<section xml:id="consistent">
    <title>Consistent</title>
    <para>
      By providing the necessary core classes to build from, as well as
      a solid set of reusable templates and additional tools (base form
      classes, base widget classes, template tags, and perhaps even
      class-based views) we can maintain consistency across
      applications.
    </para>
</section>
<section xml:id="stable">
    <title>Stable</title>
    <para>
      By architecting around these core classes and reusable components
      we create an implicit contract that changes to these components
      will be made in the most backwards-compatible ways whenever
      possible.
    </para>
</section>
<section xml:id="usable">
    <title>Usable</title>
    <para>
      Ultimately that's up to each and every developer that touches the
      code, but if we get all the other goals out of the way then we are
      free to focus on the best possible experience.
    </para>
</section>
</section>
</section>
