<?xml version="1.0" encoding="utf-8"?>
  <section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0"
  xml:id="Filter-Scheduler">
<title>Filter Scheduler</title>
<section xml:id="page-abstract">
<title>Page Abstract</title>
<para>  The <emphasis role="strong">Filter Scheduler</emphasis> supports
  filtering and weighting to make informed decisions on where a new
  instance should be created. This Scheduler supports only working with
  Compute Nodes.
</para>
</section>
<section xml:id="filtering">
  <title>Filtering</title>
  <para>
    <inlinemediaobject>
      <imageobject>
        <imagedata fileref="/images/filteringWorkflow1.png" />
      </imageobject>
    </inlinemediaobject>
  </para>
  <para>
    During its work Filter Scheduler firstly makes dictionary of
    unfiltered hosts, then filters them using filter properties and
    finally chooses hosts for the requested number of instances (each
    time it chooses the most weighed host and appends it to the list of
    selected hosts).
  </para>
  <para>
    If it turns up, that it can't find candidates for the next instance,
    it means that there are no more appropriate hosts where the instance
    could be scheduled.
  </para>
  <para>
    If we speak about filtering and weighting, their work is quite
    flexible in the Filter Scheduler. There are a lot of filtering
    strategies for the Scheduler to support. Also you can even implement
    your own algorithm of
    filtering.
  </para>
  <para>
    There are some standard filter classes to use
    (nova.scheduler.filters):
  </para>
  <itemizedlist>
    <listitem>
      <para>
        AllHostsFilter &lt;nova.scheduler.filters.all_hosts_filter.AllHostsFilter&gt;
        - frankly speaking, this filter does no operation. It passes all
        the available hosts.
      </para>
    </listitem>
    <listitem>
      <para>
        ImagePropertiesFilter &lt;nova.scheduler.filters.image_props_filter.ImagePropertiesFilter&gt;
        - filters hosts based on properties defined on the instance's
        image. It passes hosts that can support the specified image
        properties contained in the instance.
      </para>
    </listitem>
    <listitem>
      <para>
        AvailabilityZoneFilter &lt;nova.scheduler.filters.availability_zone_filter.AvailabilityZoneFilter&gt;
        - filters hosts by availability zone. It passes hosts matching
        the availability zone specified in the instance properties.
      </para>
    </listitem>
    <listitem>
      <para>
        ComputeCapabilitiesFilter &lt;nova.scheduler.filters.compute_capabilities_filter.ComputeCapabilitiesFilter&gt;
        - checks that the capabilities provided by the host compute
        service satisfy any extra specifications associated with the
        instance type. It passes hosts that can create the specified
        instance type.
      </para>
      <para>
        The extra specifications can have a scope at the beginning of
        the key string of a key/value pair. The scope format is
        <literal>scope:key</literal> and can be nested, i.e.
        <literal>key_string := scope:key_string</literal>. Example like
        <literal>capabilities:cpu_info: features</literal> is valid
        scope format. A key string without any <literal>:</literal> is
        non-scope format. Each filter defines it's valid scope, and not
        all filters accept non-scope format.
      </para>
      <para>
        The extra specifications can have an operator at the beginning
        of the value string of a key/value pair. If there is no operator
        specified, then a default operator of <literal>s==</literal> is
        used. Valid operators are:
      </para>
    </listitem>
  </itemizedlist>
  <programlisting>
* = (equal to or greater than as a number; same as vcpus case)
* == (equal to as a number)
* != (not equal to as a number)
* &gt;= (greater than or equal to as a number)
* &lt;= (less than or equal to as a number)
* s== (equal to as a string)
* s!= (not equal to as a string)
* s&gt;= (greater than or equal to as a string)
* s&gt; (greater than as a string)
* s&lt;= (less than or equal to as a string)
* s&lt; (less than as a string)
* &lt;in&gt; (substring)
* &lt;or&gt; (find one of these)

Examples are: &quot;&gt;= 5&quot;, &quot;s== 2.1.0&quot;, &quot;&lt;in&gt; gcc&quot;, and &quot;&lt;or&gt; fpu &lt;or&gt; gpu&quot;
</programlisting>
  <itemizedlist>
    <listitem>
      <para>
        AggregateInstanceExtraSpecsFilter &lt;nova.scheduler.filters.aggregate_instance_extra_specs.AggregateInstanceExtraSpecsFilter&gt;
        - checks that the aggregate metadata satisfies any extra
        specifications associated with the instance type (that have no
        scope or are scoped with
        <literal>aggregate_instance_extra_specs</literal>). It passes
        hosts that can create the specified instance type. The extra
        specifications can have the same operators as
        ComputeCapabilitiesFilter &lt;nova.scheduler.filters.compute_capabilities_filter.ComputeCapabilitiesFilter&gt;.
      </para>
    </listitem>
    <listitem>
      <para>
        ComputeFilter &lt;nova.scheduler.filters.compute_filter.ComputeFilter&gt;
        - passes all hosts that are operational and enabled.
      </para>
    </listitem>
    <listitem>
      <para>
        CoreFilter &lt;nova.scheduler.filters.core_filter.CoreFilter&gt;
        - filters based on CPU core utilization. It passes hosts with
        sufficient number of CPU cores.
      </para>
    </listitem>
    <listitem>
      <para>
        AggregateCoreFilter &lt;nova.scheduler.filters.core_filter.AggregateCoreFilter&gt;
        - filters hosts by CPU core number with per-aggregate
        <literal>cpu_allocation_ratio</literal> setting. If no
        per-aggregate value is found, it will fall back to the global
        default <literal>cpu_allocation_ratio</literal>. If more than
        one value is found for a host (meaning the host is in two
        differenet aggregate with different ratio settings), the minimum
        value will be used.
      </para>
    </listitem>
    <listitem>
      <para>
        IsolatedHostsFilter &lt;nova.scheduler.filters.isolated_hosts_filter&gt;
        - filter based on <literal>image_isolated</literal>,
        <literal>host_isolated</literal> and
        <literal>restrict_isolated_hosts_to_isolated_images</literal>
        flags.
      </para>
    </listitem>
    <listitem>
      <para>
        JsonFilter &lt;nova.scheduler.filters.json_filter.JsonFilter&gt;
        - allows simple JSON-based grammar for selecting hosts.
      </para>
    </listitem>
    <listitem>
      <para>
        RamFilter &lt;nova.scheduler.filters.ram_filter.RamFilter&gt; -
        filters hosts by their RAM. Only hosts with sufficient RAM to
        host the instance are passed.
      </para>
    </listitem>
    <listitem>
      <para>
        AggregateRamFilter &lt;nova.scheduler.filters.ram_filter.AggregateRamFilter&gt;
        - filters hosts by RAM with per-aggregate
        <literal>ram_allocation_ratio</literal> setting. If no
        per-aggregate value is found, it will fall back to the global
        default <literal>ram_allocation_ratio</literal>. If more than
        one value is found for a host (meaning the host is in two
        differenet aggregate with different ratio settings), the minimum
        value will be used.
      </para>
    </listitem>
    <listitem>
      <para>
        SimpleCIDRAffinityFilter &lt;nova.scheduler.filters.affinity_filter.SimpleCIDRAffinityFilter&gt;
        - allows to put a new instance on a host within the same IP
        block.
      </para>
    </listitem>
    <listitem>
      <para>
        DifferentHostFilter &lt;nova.scheduler.filters.affinity_filter.DifferentHostFilter&gt;
        - allows to put the instance on a different host from a set of
        instances.
      </para>
    </listitem>
    <listitem>
      <para>
        SameHostFilter &lt;nova.scheduler.filters.affinity_filter.SameHostFilter&gt;
        - puts the instance on the same host as another instance in a
        set of of instances.
      </para>
    </listitem>
    <listitem>
      <para>
        RetryFilter &lt;nova.scheduler.filters.retry_filter.RetryFilter&gt;
        - filters hosts that have been attempted for scheduling. Only
        passes hosts that have not been previously attempted.
      </para>
    </listitem>
    <listitem>
      <para>
        TrustedFilter &lt;nova.scheduler.filters.trusted_filter.TrustedFilter&gt;
        - filters hosts based on their trust. Only passes hosts that
        meet the trust requirements specified in the instance
        properties.
      </para>
    </listitem>
    <listitem>
      <para>
        TypeAffinityFilter &lt;nova.scheduler.filters.type_filter.TypeAffinityFilter&gt;
        - Only passes hosts that are not already running an instance of
        the requested type.
      </para>
    </listitem>
    <listitem>
      <para>
        AggregateTypeAffinityFilter &lt;nova.scheduler.filters.type_filter.AggregateTypeAffinityFilter&gt;
        - limits instance_type by aggregate.
      </para>
    </listitem>
    <listitem>
      <para>
        GroupAntiAffinityFilter &lt;nova.scheduler.filters.affinity_filter.GroupAntiAffinityFilter&gt;
        - ensures that each instance in group is on a different host.
      </para>
    </listitem>
    <listitem>
      <para>
        GroupAffinityFilter &lt;nova.scheduler.filters.affinity_filter.GroupAffinityFilter&gt;
        - ensures that each instance in group is on a same host with one
        of the instance host in a group.
      </para>
    </listitem>
    <listitem>
      <para>
        AggregateMultiTenancyIsolation &lt;nova.scheduler.filters.aggregate_multitenancy_isolation.AggregateMultiTenancyIsolation&gt;
        - isolate tenants in specific aggregates.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Now we can focus on these standard filter classes in details. I will
    pass the simplest ones, such as
    AllHostsFilter &lt;nova.scheduler.filters.all_hosts_filter.AllHostsFilter&gt;,
    CoreFilter &lt;nova.scheduler.filters.core_filter.CoreFilter&gt; and
    RamFilter &lt;nova.scheduler.filters.ram_filter.RamFilter&gt; are,
    because their functionality is quite simple and can be understood
    just from the code. For example class
    RamFilter &lt;nova.scheduler.filters.ram_filter.RamFilter&gt; has
    the next realization:
  </para>
  <programlisting>
class RamFilter(filters.BaseHostFilter):
    &quot;&quot;&quot;Ram Filter with over subscription flag&quot;&quot;&quot;

    def host_passes(self, host_state, filter_properties):
        &quot;&quot;&quot;Only return hosts with sufficient available RAM.&quot;&quot;&quot;
        instance_type = filter_properties.get('instance_type')
        requested_ram = instance_type['memory_mb']
        free_ram_mb = host_state.free_ram_mb
        total_usable_ram_mb = host_state.total_usable_ram_mb
        used_ram_mb = total_usable_ram_mb - free_ram_mb
        return total_usable_ram_mb * FLAGS.ram_allocation_ratio  - used_ram_mb &gt;= requested_ram
</programlisting>
  <para>
    Here <literal>ram_allocation_ratio</literal> means the virtual RAM
    to physical RAM allocation ratio (it is <literal>1.5</literal> by
    default). Really, nice and simple.
  </para>
  <para>
    Next standard filter to describe is
    AvailabilityZoneFilter &lt;nova.scheduler.filters.availability_zone_filter.AvailabilityZoneFilter&gt;
    and it isn't difficult too. This filter just looks at the
    availability zone of compute node and availability zone from the
    properties of the request. Each compute service has its own
    availability zone. So deployment engineers have an option to run
    scheduler with availability zones support and can configure
    availability zones on each compute host. This classes method
    <literal>host_passes</literal> returns <literal>True</literal> if
    availability zone mentioned in request is the same on the current
    compute host.
  </para>
  <para>
    The
    ImagePropertiesFilter &lt;nova.scheduler.filters.image_props_filter.ImagePropertiesFilter&gt;
    filters hosts based on the architecture, hypervisor type, and
    virtual machine mode specified in the instance. E.g., an instance
    might require a host that supports the arm architecture on a qemu
    compute host. The
    ImagePropertiesFilter &lt;nova.scheduler.filters.image_props_filter.ImagePropertiesFilter&gt;
    will only pass hosts that can satisfy this request. These instance
    properties are populated from properties define on the instance's
    image. E.g. an image can be decorated with these properties using
    <literal>glance image-update img-uuid --property architecture=arm --property hypervisor_type=qemu</literal>
    Only hosts that satisfy these requirements will pass the
    ImagePropertiesFilter &lt;nova.scheduler.filters.image_props_filter.ImagePropertiesFilter&gt;.
  </para>
  <para>
    ComputeCapabilitiesFilter &lt;nova.scheduler.filters.compute_capabilities_filter.ComputeCapabilitiesFilter&gt;
    checks if the host satisfies any <literal>extra_specs</literal>
    specified on the instance type. The <literal>extra_specs</literal>
    can contain key/value pairs. The key for the filter is either
    non-scope format (i.e. no <literal>:</literal> contained), or scope
    format in capabilities scope (i.e.
    <literal>capabilities:xxx:yyy</literal>). One example of
    capabilities scope is
    <literal>capabilities:cpu_info:features</literal>, which will match
    host's cpu features capabilities. The
    ComputeCapabilitiesFilter &lt;nova.scheduler.filters.compute_capabilities_filter.ComputeCapabilitiesFilter&gt;
    will only pass hosts whose capabilities satisfy the requested
    specifications. All hosts are passed if no
    <literal>extra_specs</literal> are specified.
  </para>
  <para>
    ComputeFilter &lt;nova.scheduler.filters.compute_filter.ComputeFilter&gt;
    is quite simple and passes any host whose compute service is enabled
    and operational.
  </para>
  <para>
    Now we are going to
    IsolatedHostsFilter &lt;nova.scheduler.filters.isolated_hosts_filter&gt;.
    There can be some special hosts reserved for specific images. These
    hosts are called <emphasis role="strong">isolated</emphasis>. So the
    images to run on the isolated hosts are also called isolated. This
    Scheduler checks if <literal>image_isolated</literal> flag named in
    instance specifications is the same that the host has. Isolated
    hosts can run non isolated images if the flag
    <literal>restrict_isolated_hosts_to_isolated_images</literal> is set
    to false.
  </para>
  <para>
    DifferentHostFilter &lt;nova.scheduler.filters.affinity_filter.DifferentHostFilter&gt;
    - its method <literal>host_passes</literal> returns
    <literal>True</literal> if host to place instance on is different
    from all the hosts used by set of instances.
  </para>
  <para>
    SameHostFilter &lt;nova.scheduler.filters.affinity_filter.SameHostFilter&gt;
    does the opposite to what
    DifferentHostFilter &lt;nova.scheduler.filters.affinity_filter.DifferentHostFilter&gt;
    does. So its <literal>host_passes</literal> returns
    <literal>True</literal> if the host we want to place instance on is
    one of the set of instances uses.
  </para>
  <para>
    SimpleCIDRAffinityFilter &lt;nova.scheduler.filters.affinity_filter.SimpleCIDRAffinityFilter&gt;
    looks at the subnet mask and investigates if the network address of
    the current host is in the same sub network as it was defined in the
    request.
  </para>
  <para>
    GroupAntiAffinityFilter &lt;nova.scheduler.filters.affinity_filter.GroupAntiAffinityFilter&gt;
    its method <literal>host_passes</literal> returns
    <literal>True</literal> if host to place the instance on is not in a
    group of hosts. The group of hosts is maintained by a group name.
    The scheduler hint contains the group name.
  </para>
  <para>
    GroupAffinityFilter &lt;nova.scheduler.filters.affinity_filter.GroupAffinityFilter&gt;
    its method <literal>host_passes</literal> returns
    <literal>True</literal> if host to place the instance on is in a
    group of hosts. The group of hosts is maintained by a group name.
    The scheduler hint contains the group name.
  </para>
  <para>
    JsonFilter &lt;nova.scheduler.filters.json_filter.JsonFilter&gt; -
    this filter provides the opportunity to write complicated queries
    for the hosts capabilities filtering, based on simple JSON-like
    syntax. There can be used the following operations for the host
    states properties: <literal>=</literal>, <literal>&lt;</literal>,
    <literal>&gt;</literal>, <literal>in</literal>,
    <literal>&lt;=</literal>, <literal>&gt;=</literal>, that can be
    combined with the following logical operations:
    <literal>not</literal>, <literal>or</literal>,
    <literal>and</literal>. For example, there is the query you can find
    in tests:
  </para>
  <programlisting>
['and',
    ['&gt;=', '$free_ram_mb', 1024],
    ['&gt;=', '$free_disk_mb', 200 * 1024]
]
</programlisting>
  <para>
    This query will filter all hosts with free RAM greater or equal than
    1024 MB and at the same time with free disk space greater or equal
    than 200 GB.
  </para>
  <para>
    Many filters use data from <literal>scheduler_hints</literal>, that
    is defined in the moment of creation of the new server for the user.
    The only exception for this rule is
    JsonFilter &lt;nova.scheduler.filters.json_filter.JsonFilter&gt;,
    that takes data in some strange difficult to understand way.
  </para>
  <para>
    The
    RetryFilter &lt;nova.scheduler.filters.retry_filter.RetryFilter&gt;
    filters hosts that have already been attempted for scheduling. It
    only passes hosts that have not been previously attempted.
  </para>
  <para>
    The
    TrustedFilter &lt;nova.scheduler.filters.trusted_filter.TrustedFilter&gt;
    filters hosts based on their trust. Only passes hosts that match the
    trust requested in the <literal>extra_specs</literal> for the
    flavor. The key for this filter must be scope format as
    <literal>trust:trusted_host</literal>, where
    <literal>trust</literal> is the scope of the key and
    <literal>trusted_host</literal> is the actual key value. The value
    of this pair
    (<literal>trusted</literal>/<literal>untrusted</literal>) must match
    the integrity of a host (obtained from the Attestation service)
    before it is passed by the
    TrustedFilter &lt;nova.scheduler.filters.trusted_filter.TrustedFilter&gt;.
  </para>
  <para>
    To use filters you specify next two settings:
  </para>
  <itemizedlist>
    <listitem>
      <variablelist>
        <varlistentry>
          <term>
            <literal>scheduler_available_filters</literal> - Defines
            filter classes made available to the
          </term>
          <listitem>
            <para>
              scheduler. This setting can be used multiple times.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </listitem>
    <listitem>
      <para>
        <literal>scheduler_default_filters</literal> - Of the available
        filters, defines those that the scheduler uses by default.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    The default values for these settings in nova.conf are:
  </para>
  <programlisting>
--scheduler_available_filters=nova.scheduler.filters.standard_filters
--scheduler_default_filters=RamFilter,ComputeFilter,AvailabilityZoneFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter
</programlisting>
  <para>
    With this configuration, all filters in
    <literal>nova.scheduler.filters</literal> would be available, and by
    default the
    RamFilter &lt;nova.scheduler.filters.ram_filter.RamFilter&gt;,
    ComputeFilter &lt;nova.scheduler.filters.compute_filter.ComputeFilter&gt;,
    AvailabilityZoneFilter &lt;nova.scheduler.filters.availability_zone_filter.AvailabilityZoneFilter&gt;,
    ComputeCapabilitiesFilter &lt;nova.scheduler.filters.compute_capabilities_filter.ComputeCapabilitiesFilter&gt;,
    and
    ImagePropertiesFilter &lt;nova.scheduler.filters.image_props_filter.ImagePropertiesFilter&gt;
    would be used.
  </para>
  <para>
    If you want to create <emphasis role="strong">your own
    filter</emphasis> you just need to inherit from
    BaseHostFilter &lt;nova.scheduler.filters.BaseHostFilter&gt; and
    implement one method: <literal>host_passes</literal>. This method
    should return <literal>True</literal> if host passes the filter. It
    takes <literal>host_state</literal> (describes host) and
    <literal>filter_properties</literal> dictionary as the parameters.
  </para>
  <para>
    As an example, nova.conf could contain the following
    scheduler-related settings:
  </para>
  <programlisting>
--scheduler_driver=nova.scheduler.FilterScheduler
--scheduler_available_filters=nova.scheduler.filters.standard_filters
--scheduler_available_filters=myfilter.MyFilter
--scheduler_default_filters=RamFilter,ComputeFilter,MyFilter
</programlisting>
  <para>
    With these settings, nova will use the
    <literal>FilterScheduler</literal> for the scheduler driver. The
    standard nova filters and MyFilter are available to the
    FilterScheduler. The RamFilter, ComputeFilter, and MyFilter are used
    by default when no filters are specified in the request.
  </para>
</section>
<section xml:id="weights">
  <title>Weights</title>
  <para>
    Filter Scheduler uses so-called
    <emphasis role="strong">weights</emphasis> during its work.
  </para>
  <para>
    The Filter Scheduler weights hosts based on the config option
    <literal>scheduler_weight_classes</literal>, this defaults to
    <literal>nova.scheduler.weights.all_weighers</literal>, which
    selects the only weigher available -- the RamWeigher. Hosts are then
    weighted and sorted with the largest weight winning.
  </para>
  <para>
    Filter Scheduler finds local list of acceptable hosts by repeated
    filtering and weighing. Each time it chooses a host, it virtually
    consumes resources on it, so subsequent selections can adjust
    accordingly. It is useful if the customer asks for the some large
    amount of instances, because weight is computed for each instance
    requested.
  </para>
  <para>
    <inlinemediaobject>
      <imageobject>
        <imagedata fileref="/images/filteringWorkflow2.png" />
      </imageobject>
    </inlinemediaobject>
  </para>
  <para>
    In the end Filter Scheduler sorts selected hosts by their weight and
    provisions instances on them.
  </para>
  <para>
    P.S.: you can find more examples of using Filter Scheduler and
    standard filters in `nova.tests.scheduler`.
  </para>
</section>
</section>
