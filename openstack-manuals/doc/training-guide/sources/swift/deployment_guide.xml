<?xml version="1.0" encoding="utf-8"?>
  <section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0"
  xml:id="Deployment-Guide">
<title>Deployment Guide</title>
<section xml:iderations">
  <title>Hardware Considerations</title>
<section xml:id="page-abstract">
<title>Page Abstract</title>
<para>    Swift is designed to run on commodity hardware. At Rackspace, our
    storage servers are currently running fairly generic 4U servers with
    24 2T SATA drives and 8 cores of processing power. RAID on the
    storage drives is not required and not recommended. Swift's disk
    usage pattern is the worst case possible for RAID, and performance
    degrades very quickly using RAID 5 or 6.
  </para>
</sect1>
</section>
<section xml:id="deployment-options">
  <title>Deployment Options</title>
  <para>
    The swift services run completely autonomously, which provides for a
    lot of flexibility when architecting the hardware deployment for
    swift. The 4 main services are:
  </para>
  <orderedlist>
    <listitem>
      <para>
        Proxy Services
      </para>
    </listitem>
    <listitem>
      <para>
        Object Services
      </para>
    </listitem>
    <listitem>
      <para>
        Container Services
      </para>
    </listitem>
    <listitem>
      <para>
        Account Services
      </para>
    </listitem>
  </orderedlist>
  <para>
    The Proxy Services are more CPU and network I/O intensive. If you
    are using 10g networking to the proxy, or are terminating SSL
    traffic at the proxy, greater CPU power will be required.
  </para>
  <para>
    The Object, Container, and Account Services (Storage Services) are
    more disk and network I/O intensive.
  </para>
  <para>
    The easiest deployment is to install all services on each server.
    There is nothing wrong with doing this, as it scales each service
    out horizontally.
  </para>
  <para>
    At Rackspace, we put the Proxy Services on their own servers and all
    of the Storage Services on the same server. This allows us to send
    10g networking to the proxy and 1g to the storage servers, and keep
    load balancing to the proxies more manageable. Storage Services
    scale out horizontally as storage servers are added, and we can
    scale overall API throughput by adding more Proxies.
  </para>
  <para>
    If you need more throughput to either Account or Container Services,
    they may each be deployed to their own servers. For example you
    might use faster (but more expensive) SAS or even SSD drives to get
    faster disk I/O to the databases.
  </para>
  <para>
    Load balancing and network design is left as an exercise to the
    reader, but this is a very important part of the cluster, so time
    should be spent designing the network for a Swift cluster.
  </para>
</section>
<section xml:id="web-front-end-options">
  <title>Web Front End Options</title>
  <para>
    Swift comes with an integral web front end. However, it can also be
    deployed as a request processor of an Apache2 using mod_wsgi as
    described in
    Apache Deployment Guide &lt;apache_deployment_guide&gt;.
  </para>
</section>
<section xml:id="preparing-the-ring">
  <title>Preparing the Ring</title>
  <para>
    The first step is to determine the number of partitions that will be
    in the ring. We recommend that there be a minimum of 100 partitions
    per drive to insure even distribution across the drives. A good
    starting point might be to figure out the maximum number of drives
    the cluster will contain, and then multiply by 100, and then round
    up to the nearest power of two.
  </para>
  <para>
    For example, imagine we are building a cluster that will have no
    more than 5,000 drives. That would mean that we would have a total
    number of 500,000 partitions, which is pretty close to 2^19, rounded
    up.
  </para>
  <para>
    It is also a good idea to keep the number of partitions small
    (relatively). The more partitions there are, the more work that has
    to be done by the replicators and other backend jobs and the more
    memory the rings consume in process. The goal is to find a good
    balance between small rings and maximum cluster size.
  </para>
  <para>
    The next step is to determine the number of replicas to store of the
    data. Currently it is recommended to use 3 (as this is the only
    value that has been tested). The higher the number, the more storage
    that is used but the less likely you are to lose data.
  </para>
  <para>
    It is also important to determine how many zones the cluster should
    have. It is recommended to start with a minimum of 5 zones. You can
    start with fewer, but our testing has shown that having at least
    five zones is optimal when failures occur. We also recommend trying
    to configure the zones at as high a level as possible to create as
    much isolation as possible. Some example things to take into
    consideration can include physical location, power availability, and
    network connectivity. For example, in a small cluster you might
    decide to split the zones up by cabinet, with each cabinet having
    its own power and network connectivity. The zone concept is very
    abstract, so feel free to use it in whatever way best isolates your
    data from failure. Zones are referenced by number, beginning with 1.
  </para>
  <para>
    You can now start building the ring with:
  </para>
  <programlisting>
swift-ring-builder &lt;builder_file&gt; create &lt;part_power&gt; &lt;replicas&gt; &lt;min_part_hours&gt;
</programlisting>
  <para>
    This will start the ring build process creating the
    &lt;builder_file&gt; with 2^&lt;part_power&gt; partitions.
    &lt;min_part_hours&gt; is the time in hours before a specific
    partition can be moved in succession (24 is a good value for this).
  </para>
  <para>
    Devices can be added to the ring with:
  </para>
  <programlisting>
swift-ring-builder &lt;builder_file&gt; add z&lt;zone&gt;-&lt;ip&gt;:&lt;port&gt;/&lt;device_name&gt;_&lt;meta&gt; &lt;weight&gt;
</programlisting>
  <para>
    This will add a device to the ring where &lt;builder_file&gt; is the
    name of the builder file that was created previously, &lt;zone&gt;
    is the number of the zone this device is in, &lt;ip&gt; is the ip
    address of the server the device is in, &lt;port&gt; is the port
    number that the server is running on, &lt;device_name&gt; is the
    name of the device on the server (for example: sdb1), &lt;meta&gt;
    is a string of metadata for the device (optional), and
    &lt;weight&gt; is a float weight that determines how many partitions
    are put on the device relative to the rest of the devices in the
    cluster (a good starting point is 100.0 x TB on the drive). Add each
    device that will be initially in the cluster.
  </para>
  <para>
    Once all of the devices are added to the ring, run:
  </para>
  <programlisting>
swift-ring-builder &lt;builder_file&gt; rebalance
</programlisting>
  <para>
    This will distribute the partitions across the drives in the ring.
    It is important whenever making changes to the ring to make all the
    changes required before running rebalance. This will ensure that the
    ring stays as balanced as possible, and as few partitions are moved
    as possible.
  </para>
  <para>
    The above process should be done to make a ring for each storage
    service (Account, Container and Object). The builder files will be
    needed in future changes to the ring, so it is very important that
    these be kept and backed up. The resulting .tar.gz ring file should
    be pushed to all of the servers in the cluster. For more information
    about building rings, running swift-ring-builder with no options
    will display help text with available commands and options. More
    information on how the ring works internally can be found in the
    Ring Overview &lt;overview_ring&gt;.
  </para>
</section>
<section xml:id="general-service-configuration">
  <title>General Service Configuration</title>
  <para>
    Most Swift services fall into two categories. Swift's wsgi servers
    and background daemons.
  </para>
  <para>
    For more information specific to the configuration of Swift's wsgi
    servers with paste deploy see general-server-configuration
  </para>
  <para>
    Configuration for servers and daemons can be expressed together in
    the same file for each type of server, or separately. If a required
    section for the service trying to start is missing there will be an
    error. The sections not used by the service are ignored.
  </para>
  <para>
    Consider the example of an object storage node. By convention
    configuration for the object-server, object-updater,
    object-replicator, and object-auditor exist in a single file
    <literal>/etc/swift/object-server.conf</literal>:
  </para>
  <programlisting>
[DEFAULT]

[pipeline:main]
pipeline = object-server

[app:object-server]
use = egg:swift#object

[object-replicator]
reclaim_age = 259200

[object-updater]

[object-auditor]
</programlisting>
  <para>
    Swift services expect a configuration path as the first argument:
  </para>
  <programlisting>
$ swift-object-auditor 
Usage: swift-object-auditor CONFIG [options]

Error: missing config path argument
</programlisting>
  <para>
    If you omit the object-auditor section this file could not be used
    as the configuration path when starting the
    <literal>swift-object-auditor</literal> daemon:
  </para>
  <programlisting>
$ swift-object-auditor /etc/swift/object-server.conf 
Unable to find object-auditor config section in /etc/swift/object-server.conf
</programlisting>
  <para>
    If the configuration path is a directory instead of a file all of
    the files in the directory with the file extension &quot;.conf&quot;
    will be combined to generate the configuration object which is
    delivered to the Swift service. This is referred to generally as
    &quot;directory based configuration&quot;.
  </para>
  <para>
    Directory based configuration leverages ConfigParser's native
    multi-file support. Files ending in &quot;.conf&quot; in the given
    directory are parsed in lexicographical order. Filenames starting
    with '.' are ignored. A mixture of file and directory configuration
    paths is not supported - if the configuration path is a file only
    that file will be parsed.
  </para>
  <para>
    The swift service management tool <literal>swift-init</literal> has
    adopted the convention of looking for
    <literal>/etc/swift/{type}-server.conf.d/</literal> if the file
    <literal>/etc/swift/{type}-server.conf</literal> file does not
    exist.
  </para>
  <para>
    When using directory based configuration, if the same option under
    the same section appears more than once in different files, the last
    value parsed is said to override previous occurrences. You can
    ensure proper override precedence by prefixing the files in the
    configuration directory with numerical values.:
  </para>
  <programlisting>
/etc/swift/
    default.base
    object-server.conf.d/
        000_default.conf -&gt; ../default.base
        001_default-override.conf
        010_server.conf
        020_replicator.conf
        030_updater.conf
        040_auditor.conf
</programlisting>
  <para>
    You can inspect the resulting combined configuration object using
    the <literal>swift-config</literal> command line tool
  </para>
</section>
<section xml:id="general-server-configuration">
  <title>General Server Configuration</title>
  <para>
    Swift uses paste.deploy
    (<link xlink:href="http://pythonpaste.org/deploy/">http://pythonpaste.org/deploy/</link>)
    to manage server configurations.
  </para>
  <para>
    Default configuration options are set in the [DEFAULT] section, and
    any options specified there can be overridden in any of the other
    sections BUT ONLY BY USING THE SYNTAX
    <literal>set option_name = value</literal>. This is the unfortunate
    way paste.deploy works and I'll try to explain it in full.
  </para>
  <para>
    First, here's an example paste.deploy configuration file:
  </para>
  <programlisting>
[DEFAULT]
name1 = globalvalue
name2 = globalvalue
name3 = globalvalue
set name4 = globalvalue

[pipeline:main]
pipeline = myapp

[app:myapp]
use = egg:mypkg#myapp
name2 = localvalue
set name3 = localvalue
set name5 = localvalue
name6 = localvalue
</programlisting>
  <para>
    The resulting configuration that myapp receives is:
  </para>
  <programlisting>
global {'__file__': '/etc/mypkg/wsgi.conf', 'here': '/etc/mypkg',
        'name1': 'globalvalue',
        'name2': 'globalvalue',
        'name3': 'localvalue',
        'name4': 'globalvalue',
        'name5': 'localvalue',
        'set name4': 'globalvalue'}
local {'name6': 'localvalue'}
</programlisting>
  <para>
    So, name1 got the global value which is fine since it's only in the
    DEFAULT section anyway.
  </para>
  <para>
    name2 got the global value from DEFAULT even though it appears to be
    overridden in the app:myapp subsection. This is just the unfortunate
    way paste.deploy works (at least at the time of this writing.)
  </para>
  <para>
    name3 got the local value from the app:myapp subsection because it
    is using the special paste.deploy syntax of
    <literal>set option_name = value</literal>. So, if you want a
    default value for most app/filters but want to overridde it in one
    subsection, this is how you do it.
  </para>
  <para>
    name4 got the global value from DEFAULT since it's only in that
    section anyway. But, since we used the <literal>set</literal> syntax
    in the DEFAULT section even though we shouldn't, notice we also got
    a <literal>set name4</literal> variable. Weird, but probably not
    harmful.
  </para>
  <para>
    name5 got the local value from the app:myapp subsection since it's
    only there anyway, but notice that it is in the global configuration
    and not the local configuration. This is because we used the
    <literal>set</literal> syntax to set the value. Again, weird, but
    not harmful since Swift just treats the two sets of configuration
    values as one set anyway.
  </para>
  <para>
    name6 got the local value from app:myapp subsection since it's only
    there, and since we didn't use the <literal>set</literal> syntax,
    it's only in the local configuration and not the global one. Though,
    as indicated above, there is no special distinction with Swift.
  </para>
  <para>
    That's quite an explanation for something that should be so much
    simpler, but it might be important to know how paste.deploy
    interprets configuration files. The main rule to remember when
    working with Swift configuration files is:
  </para>
  <blockquote>
    <para>
      <emphasis role="strong">note</emphasis>
    </para>
    <para>
      Use the <literal>set option_name = value</literal> syntax in
      subsections if the option is also set in the
      <literal>[DEFAULT]</literal> section. Don't get in the habit of
      always using the <literal>set</literal> syntax or you'll probably
      mess up your non-paste.deploy configuration files.
    </para>
  </blockquote>
</section>
<section xml:id="object-server-configuration">
  <title>Object Server Configuration</title>
  <para>
    An Example Object Server configuration can be found at
    etc/object-server.conf-sample in the source code repository.
  </para>
  <para>
    The following configuration options are available:
  </para>
  <para>
    [DEFAULT]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            swift_dir
          </entry>
          <entry>
            /etc/swift
          </entry>
          <entry>
            Swift configuration directory
          </entry>
        </row>
        <row>
          <entry>
            devices
          </entry>
          <entry>
            /srv/node
          </entry>
          <entry>
            Parent directory of where devices are mounted
          </entry>
        </row>
        <row>
          <entry>
            mount_check
          </entry>
          <entry>
            true
          </entry>
          <entry>
            Whether or not check if the devices are
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            mounted to prevent accidentally writing
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            to the root device
          </entry>
        </row>
        <row>
          <entry>
            bind_ip
          </entry>
          <entry>
            0.0.0.0
          </entry>
          <entry>
            IP Address for server to bind to
          </entry>
        </row>
        <row>
          <entry>
            bind_port
          </entry>
          <entry>
            6000
          </entry>
          <entry>
            Port for server to bind to
          </entry>
        </row>
        <row>
          <entry>
            bind_timeout
          </entry>
          <entry>
            30
          </entry>
          <entry>
            Seconds to attempt bind before giving up
          </entry>
        </row>
        <row>
          <entry>
            workers
          </entry>
          <entry>
            auto
          </entry>
          <entry>
            Override the number of pre-forked workers
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            that will accept connections. If set it
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            should be an integer, zero means no fork. If
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            unset, it will try to default to the number
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            of effective cpu cores and fallback to one.
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            Increasing the number of workers may reduce
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            the possibility of slow file system
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            operations in one request from negatively
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            impacting other requests, but may not be as
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            efficient as tuning :ref:`threads_per_disk
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            &lt;object-server-options&gt;`
          </entry>
        </row>
        <row>
          <entry>
            max_clients
          </entry>
          <entry>
            1024
          </entry>
          <entry>
            Maximum number of clients one worker can
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            process simultaneously (it will actually
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            accept(2) N + 1). Setting this to one (1)
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            will only handle one request at a time,
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            without accepting another request
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            concurrently.
          </entry>
        </row>
        <row>
          <entry>
            disable_fallocate
          </entry>
          <entry>
            false
          </entry>
          <entry>
            Disable &quot;fast fail&quot; fallocate checks if the
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            underlying filesystem does not support it.
          </entry>
        </row>
        <row>
          <entry>
            log_custom_handlers
          </entry>
          <entry>
            None
          </entry>
          <entry>
            Comma-separated list of functions to call
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            to setup custom log handlers.
          </entry>
        </row>
        <row>
          <entry>
            eventlet_debug
          </entry>
          <entry>
            false
          </entry>
          <entry>
            If true, turn on debug logging for eventlet
          </entry>
        </row>
        <row>
          <entry>
            fallocate_reserve
          </entry>
          <entry>
            0
          </entry>
          <entry>
            You can set fallocate_reserve to the number of
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            bytes you'd like fallocate to reserve, whether
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            there is space for the given file size or not.
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            This is useful for systems that behave badly
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            when they completely run out of space; you can
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            make the services pretend they're out of space
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            early.
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    [object-server]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            use
          </entry>
          <entry>
          </entry>
          <entry>
            paste.deploy entry point for the object
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            server. For most cases, this should be
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            egg:swift#object.
          </entry>
        </row>
        <row>
          <entry>
            set log_name
          </entry>
          <entry>
            object-server
          </entry>
          <entry>
            Label used when logging
          </entry>
        </row>
        <row>
          <entry>
            set log_facility
          </entry>
          <entry>
            LOG_LOCAL0
          </entry>
          <entry>
            Syslog log facility
          </entry>
        </row>
        <row>
          <entry>
            set log_level
          </entry>
          <entry>
            INFO
          </entry>
          <entry>
            Logging level
          </entry>
        </row>
        <row>
          <entry>
            set log_requests
          </entry>
          <entry>
            True
          </entry>
          <entry>
            Whether or not to log each request
          </entry>
        </row>
        <row>
          <entry>
            user
          </entry>
          <entry>
            swift
          </entry>
          <entry>
            User to run as
          </entry>
        </row>
        <row>
          <entry>
            node_timeout
          </entry>
          <entry>
            3
          </entry>
          <entry>
            Request timeout to external services
          </entry>
        </row>
        <row>
          <entry>
            conn_timeout
          </entry>
          <entry>
            0.5
          </entry>
          <entry>
            Connection timeout to external services
          </entry>
        </row>
        <row>
          <entry>
            network_chunk_size
          </entry>
          <entry>
            65536
          </entry>
          <entry>
            Size of chunks to read/write over the
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            network
          </entry>
        </row>
        <row>
          <entry>
            disk_chunk_size
          </entry>
          <entry>
            65536
          </entry>
          <entry>
            Size of chunks to read/write to disk
          </entry>
        </row>
        <row>
          <entry>
            max_upload_time
          </entry>
          <entry>
            86400
          </entry>
          <entry>
            Maximum time allowed to upload an object
          </entry>
        </row>
        <row>
          <entry>
            slow
          </entry>
          <entry>
            0
          </entry>
          <entry>
            If &gt; 0, Minimum time in seconds for a PUT
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            or DELETE request to complete
          </entry>
        </row>
        <row>
          <entry>
            mb_per_sync
          </entry>
          <entry>
            512
          </entry>
          <entry>
            On PUT requests, sync file every n MB
          </entry>
        </row>
        <row>
          <entry>
            keep_cache_size
          </entry>
          <entry>
            5242880
          </entry>
          <entry>
            Largest object size to keep in buffer cache
          </entry>
        </row>
        <row>
          <entry>
            keep_cache_private
          </entry>
          <entry>
            false
          </entry>
          <entry>
            Allow non-public objects to stay in
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            kernel's buffer cache
          </entry>
        </row>
        <row>
          <entry>
            threads_per_disk
          </entry>
          <entry>
            0
          </entry>
          <entry>
            Size of the per-disk thread pool used for
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            performing disk I/O. The default of 0 means
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            to not use a per-disk thread pool. It is
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            recommended to keep this value small, as
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            large values can result in high read
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            latencies due to large queue depths. A good
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            starting point is 4 threads per disk.
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    [object-replicator]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            log_name
          </entry>
          <entry>
            object-replicator
          </entry>
          <entry>
            Label used when logging
          </entry>
        </row>
        <row>
          <entry>
            log_facility
          </entry>
          <entry>
            LOG_LOCAL0
          </entry>
          <entry>
            Syslog log facility
          </entry>
        </row>
        <row>
          <entry>
            log_level
          </entry>
          <entry>
            INFO
          </entry>
          <entry>
            Logging level
          </entry>
        </row>
        <row>
          <entry>
            daemonize
          </entry>
          <entry>
            yes
          </entry>
          <entry>
            Whether or not to run replication as a
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            daemon
          </entry>
        </row>
        <row>
          <entry>
            run_pause
          </entry>
          <entry>
            30
          </entry>
          <entry>
            Time in seconds to wait between
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            replication passes
          </entry>
        </row>
        <row>
          <entry>
            concurrency
          </entry>
          <entry>
            1
          </entry>
          <entry>
            Number of replication workers to spawn
          </entry>
        </row>
        <row>
          <entry>
            timeout
          </entry>
          <entry>
            5
          </entry>
          <entry>
            Timeout value sent to rsync --timeout
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            and --contimeout options
          </entry>
        </row>
        <row>
          <entry>
            stats_interval
          </entry>
          <entry>
            3600
          </entry>
          <entry>
            Interval in seconds between logging
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            replication statistics
          </entry>
        </row>
        <row>
          <entry>
            reclaim_age
          </entry>
          <entry>
            604800
          </entry>
          <entry>
            Time elapsed in seconds before an
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            object can be reclaimed
          </entry>
        </row>
        <row>
          <entry>
            handoffs_first
          </entry>
          <entry>
            false
          </entry>
          <entry>
            If set to True, partitions that are
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            not supposed to be on the node will be
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            replicated first. The default setting
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            should not be changed, except for
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            extreme situations.
          </entry>
        </row>
        <row>
          <entry>
            handoff_delete
          </entry>
          <entry>
            auto
          </entry>
          <entry>
            By default handoff partitions will be
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            removed when it has successfully
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            replicated to all the cannonical nodes.
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            If set to an integer n, it will remove
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            the partition if it is successfully
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            replicated to n nodes. The default
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            setting should not be changed, except
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            for extremem situations.
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    [object-updater]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            log_name
          </entry>
          <entry>
            object-updater
          </entry>
          <entry>
            Label used when logging
          </entry>
        </row>
        <row>
          <entry>
            log_facility
          </entry>
          <entry>
            LOG_LOCAL0
          </entry>
          <entry>
            Syslog log facility
          </entry>
        </row>
        <row>
          <entry>
            log_level
          </entry>
          <entry>
            INFO
          </entry>
          <entry>
            Logging level
          </entry>
        </row>
        <row>
          <entry>
            interval
          </entry>
          <entry>
            300
          </entry>
          <entry>
            Minimum time for a pass to take
          </entry>
        </row>
        <row>
          <entry>
            concurrency
          </entry>
          <entry>
            1
          </entry>
          <entry>
            Number of updater workers to spawn
          </entry>
        </row>
        <row>
          <entry>
            node_timeout
          </entry>
          <entry>
            10
          </entry>
          <entry>
            Request timeout to external services
          </entry>
        </row>
        <row>
          <entry>
            conn_timeout
          </entry>
          <entry>
            0.5
          </entry>
          <entry>
            Connection timeout to external services
          </entry>
        </row>
        <row>
          <entry>
            slowdown
          </entry>
          <entry>
            0.01
          </entry>
          <entry>
            Time in seconds to wait between objects
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    [object-auditor]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            log_name
          </entry>
          <entry>
            object-auditor
          </entry>
          <entry>
            Label used when logging
          </entry>
        </row>
        <row>
          <entry>
            log_facility
          </entry>
          <entry>
            LOG_LOCAL0
          </entry>
          <entry>
            Syslog log facility
          </entry>
        </row>
        <row>
          <entry>
            log_level
          </entry>
          <entry>
            INFO
          </entry>
          <entry>
            Logging level
          </entry>
        </row>
        <row>
          <entry>
            log_time
          </entry>
          <entry>
            3600
          </entry>
          <entry>
            Frequency of status logs in seconds.
          </entry>
        </row>
        <row>
          <entry>
            files_per_second
          </entry>
          <entry>
            20
          </entry>
          <entry>
            Maximum files audited per second. Should
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            be tuned according to individual system
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            specs. 0 is unlimited.
          </entry>
        </row>
        <row>
          <entry>
            bytes_per_second
          </entry>
          <entry>
            10000000
          </entry>
          <entry>
            Maximum bytes audited per second. Should
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            be tuned according to individual system
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            specs. 0 is unlimited.
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
</section>
<section xml:id="container-server-configuration">
  <title>Container Server Configuration</title>
  <para>
    An example Container Server configuration can be found at
    etc/container-server.conf-sample in the source code repository.
  </para>
  <para>
    The following configuration options are available:
  </para>
  <para>
    [DEFAULT]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            swift_dir
          </entry>
          <entry>
            /etc/swift
          </entry>
          <entry>
            Swift configuration directory
          </entry>
        </row>
        <row>
          <entry>
            devices
          </entry>
          <entry>
            /srv/node
          </entry>
          <entry>
            Parent directory of where devices are mounted
          </entry>
        </row>
        <row>
          <entry>
            mount_check
          </entry>
          <entry>
            true
          </entry>
          <entry>
            Whether or not check if the devices are
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            mounted to prevent accidentally writing
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            to the root device
          </entry>
        </row>
        <row>
          <entry>
            bind_ip
          </entry>
          <entry>
            0.0.0.0
          </entry>
          <entry>
            IP Address for server to bind to
          </entry>
        </row>
        <row>
          <entry>
            bind_port
          </entry>
          <entry>
            6001
          </entry>
          <entry>
            Port for server to bind to
          </entry>
        </row>
        <row>
          <entry>
            bind_timeout
          </entry>
          <entry>
            30
          </entry>
          <entry>
            Seconds to attempt bind before giving up
          </entry>
        </row>
        <row>
          <entry>
            workers
          </entry>
          <entry>
            auto
          </entry>
          <entry>
            Override the number of pre-forked workers
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            that will accept connections. If set it
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            should be an integer, zero means no fork. If
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            unset, it will try to default to the number
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            of effective cpu cores and fallback to one.
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            Increasing the number of workers may reduce
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            the possibility of slow file system
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            operations in one request from negatively
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            impacting other requests. See
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            general-service-tuning
          </entry>
        </row>
        <row>
          <entry>
            max_clients
          </entry>
          <entry>
            1024
          </entry>
          <entry>
            Maximum number of clients one worker can
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            process simultaneously (it will actually
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            accept(2) N + 1). Setting this to one (1)
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            will only handle one request at a time,
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            without accepting another request
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            concurrently.
          </entry>
        </row>
        <row>
          <entry>
            user
          </entry>
          <entry>
            swift
          </entry>
          <entry>
            User to run as
          </entry>
        </row>
        <row>
          <entry>
            disable_fallocate
          </entry>
          <entry>
            false
          </entry>
          <entry>
            Disable &quot;fast fail&quot; fallocate checks if the
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            underlying filesystem does not support it.
          </entry>
        </row>
        <row>
          <entry>
            log_custom_handlers
          </entry>
          <entry>
            None
          </entry>
          <entry>
            Comma-separated list of functions to call
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            to setup custom log handlers.
          </entry>
        </row>
        <row>
          <entry>
            eventlet_debug
          </entry>
          <entry>
            false
          </entry>
          <entry>
            If true, turn on debug logging for eventlet
          </entry>
        </row>
        <row>
          <entry>
            fallocate_reserve
          </entry>
          <entry>
            0
          </entry>
          <entry>
            You can set fallocate_reserve to the number of
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            bytes you'd like fallocate to reserve, whether
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            there is space for the given file size or not.
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            This is useful for systems that behave badly
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            when they completely run out of space; you can
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            make the services pretend they're out of space
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            early.
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    [container-server]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            use
          </entry>
          <entry>
          </entry>
          <entry>
            paste.deploy entry point for the
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            container server. For most cases, this
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            should be egg:swift#container.
          </entry>
        </row>
        <row>
          <entry>
            set log_name
          </entry>
          <entry>
            container-server
          </entry>
          <entry>
            Label used when logging
          </entry>
        </row>
        <row>
          <entry>
            set log_facility
          </entry>
          <entry>
            LOG_LOCAL0
          </entry>
          <entry>
            Syslog log facility
          </entry>
        </row>
        <row>
          <entry>
            set log_level
          </entry>
          <entry>
            INFO
          </entry>
          <entry>
            Logging level
          </entry>
        </row>
        <row>
          <entry>
            node_timeout
          </entry>
          <entry>
            3
          </entry>
          <entry>
            Request timeout to external services
          </entry>
        </row>
        <row>
          <entry>
            conn_timeout
          </entry>
          <entry>
            0.5
          </entry>
          <entry>
            Connection timeout to external services
          </entry>
        </row>
        <row>
          <entry>
            allow_versions
          </entry>
          <entry>
            false
          </entry>
          <entry>
            Enable/Disable object versioning feature
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    [container-replicator]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            log_name
          </entry>
          <entry>
            container-replicator
          </entry>
          <entry>
            Label used when logging
          </entry>
        </row>
        <row>
          <entry>
            log_facility
          </entry>
          <entry>
            LOG_LOCAL0
          </entry>
          <entry>
            Syslog log facility
          </entry>
        </row>
        <row>
          <entry>
            log_level
          </entry>
          <entry>
            INFO
          </entry>
          <entry>
            Logging level
          </entry>
        </row>
        <row>
          <entry>
            per_diff
          </entry>
          <entry>
            1000
          </entry>
          <entry>
          </entry>
        </row>
        <row>
          <entry>
            concurrency
          </entry>
          <entry>
            8
          </entry>
          <entry>
            Number of replication workers to
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            spawn
          </entry>
        </row>
        <row>
          <entry>
            run_pause
          </entry>
          <entry>
            30
          </entry>
          <entry>
            Time in seconds to wait between
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            replication passes
          </entry>
        </row>
        <row>
          <entry>
            node_timeout
          </entry>
          <entry>
            10
          </entry>
          <entry>
            Request timeout to external services
          </entry>
        </row>
        <row>
          <entry>
            conn_timeout
          </entry>
          <entry>
            0.5
          </entry>
          <entry>
            Connection timeout to external
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            services
          </entry>
        </row>
        <row>
          <entry>
            reclaim_age
          </entry>
          <entry>
            604800
          </entry>
          <entry>
            Time elapsed in seconds before a
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            container can be reclaimed
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    [container-updater]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            log_name
          </entry>
          <entry>
            container-updater
          </entry>
          <entry>
            Label used when logging
          </entry>
        </row>
        <row>
          <entry>
            log_facility
          </entry>
          <entry>
            LOG_LOCAL0
          </entry>
          <entry>
            Syslog log facility
          </entry>
        </row>
        <row>
          <entry>
            log_level
          </entry>
          <entry>
            INFO
          </entry>
          <entry>
            Logging level
          </entry>
        </row>
        <row>
          <entry>
            interval
          </entry>
          <entry>
            300
          </entry>
          <entry>
            Minimum time for a pass to take
          </entry>
        </row>
        <row>
          <entry>
            concurrency
          </entry>
          <entry>
            4
          </entry>
          <entry>
            Number of updater workers to spawn
          </entry>
        </row>
        <row>
          <entry>
            node_timeout
          </entry>
          <entry>
            3
          </entry>
          <entry>
            Request timeout to external
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            services
          </entry>
        </row>
        <row>
          <entry>
            conn_timeout
          </entry>
          <entry>
            0.5
          </entry>
          <entry>
            Connection timeout to external
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            services
          </entry>
        </row>
        <row>
          <entry>
            slowdown
          </entry>
          <entry>
            0.01
          </entry>
          <entry>
            Time in seconds to wait between
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            containers
          </entry>
        </row>
        <row>
          <entry>
            account_suppression_time
          </entry>
          <entry>
            60
          </entry>
          <entry>
            Seconds to suppress updating an
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            account that has generated an
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            error (timeout, not yet found,
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            etc.)
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    [container-auditor]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            log_name
          </entry>
          <entry>
            container-auditor
          </entry>
          <entry>
            Label used when logging
          </entry>
        </row>
        <row>
          <entry>
            log_facility
          </entry>
          <entry>
            LOG_LOCAL0
          </entry>
          <entry>
            Syslog log facility
          </entry>
        </row>
        <row>
          <entry>
            log_level
          </entry>
          <entry>
            INFO
          </entry>
          <entry>
            Logging level
          </entry>
        </row>
        <row>
          <entry>
            interval
          </entry>
          <entry>
            1800
          </entry>
          <entry>
            Minimum time for a pass to take
          </entry>
        </row>
        <row>
          <entry>
            containers_per_second
          </entry>
          <entry>
            200
          </entry>
          <entry>
            Maximum containers audited per second.
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            Should be tuned according to individual
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            system specs. 0 is unlimited.
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
</section>
<section xml:id="account-server-configuration">
  <title>Account Server Configuration</title>
  <para>
    An example Account Server configuration can be found at
    etc/account-server.conf-sample in the source code repository.
  </para>
  <para>
    The following configuration options are available:
  </para>
  <para>
    [DEFAULT]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            swift_dir
          </entry>
          <entry>
            /etc/swift
          </entry>
          <entry>
            Swift configuration directory
          </entry>
        </row>
        <row>
          <entry>
            devices
          </entry>
          <entry>
            /srv/node
          </entry>
          <entry>
            Parent directory or where devices are mounted
          </entry>
        </row>
        <row>
          <entry>
            mount_check
          </entry>
          <entry>
            true
          </entry>
          <entry>
            Whether or not check if the devices are
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            mounted to prevent accidentally writing
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            to the root device
          </entry>
        </row>
        <row>
          <entry>
            bind_ip
          </entry>
          <entry>
            0.0.0.0
          </entry>
          <entry>
            IP Address for server to bind to
          </entry>
        </row>
        <row>
          <entry>
            bind_port
          </entry>
          <entry>
            6002
          </entry>
          <entry>
            Port for server to bind to
          </entry>
        </row>
        <row>
          <entry>
            bind_timeout
          </entry>
          <entry>
            30
          </entry>
          <entry>
            Seconds to attempt bind before giving up
          </entry>
        </row>
        <row>
          <entry>
            workers
          </entry>
          <entry>
            auto
          </entry>
          <entry>
            Override the number of pre-forked workers
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            that will accept connections. If set it
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            should be an integer, zero means no fork. If
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            unset, it will try to default to the number
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            of effective cpu cores and fallback to one.
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            Increasing the number of workers may reduce
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            the possibility of slow file system
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            operations in one request from negatively
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            impacting other requests. See
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            general-service-tuning
          </entry>
        </row>
        <row>
          <entry>
            max_clients
          </entry>
          <entry>
            1024
          </entry>
          <entry>
            Maximum number of clients one worker can
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            process simultaneously (it will actually
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            accept(2) N + 1). Setting this to one (1)
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            will only handle one request at a time,
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            without accepting another request
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            concurrently.
          </entry>
        </row>
        <row>
          <entry>
            user
          </entry>
          <entry>
            swift
          </entry>
          <entry>
            User to run as
          </entry>
        </row>
        <row>
          <entry>
            db_preallocation
          </entry>
          <entry>
            off
          </entry>
          <entry>
            If you don't mind the extra disk space usage in
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            overhead, you can turn this on to preallocate
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            disk space with SQLite databases to decrease
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            fragmentation.
          </entry>
        </row>
        <row>
          <entry>
            disable_fallocate
          </entry>
          <entry>
            false
          </entry>
          <entry>
            Disable &quot;fast fail&quot; fallocate checks if the
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            underlying filesystem does not support it.
          </entry>
        </row>
        <row>
          <entry>
            log_custom_handlers
          </entry>
          <entry>
            None
          </entry>
          <entry>
            Comma-separated list of functions to call
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            to setup custom log handlers.
          </entry>
        </row>
        <row>
          <entry>
            eventlet_debug
          </entry>
          <entry>
            false
          </entry>
          <entry>
            If true, turn on debug logging for eventlet
          </entry>
        </row>
        <row>
          <entry>
            fallocate_reserve
          </entry>
          <entry>
            0
          </entry>
          <entry>
            You can set fallocate_reserve to the number of
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            bytes you'd like fallocate to reserve, whether
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            there is space for the given file size or not.
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            This is useful for systems that behave badly
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            when they completely run out of space; you can
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            make the services pretend they're out of space
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            early.
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    [account-server]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            use
          </entry>
          <entry>
          </entry>
          <entry>
            Entry point for paste.deploy for the account
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            server. For most cases, this should be
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            egg:swift#account.
          </entry>
        </row>
        <row>
          <entry>
            set log_name
          </entry>
          <entry>
            account-server
          </entry>
          <entry>
            Label used when logging
          </entry>
        </row>
        <row>
          <entry>
            set log_facility
          </entry>
          <entry>
            LOG_LOCAL0
          </entry>
          <entry>
            Syslog log facility
          </entry>
        </row>
        <row>
          <entry>
            set log_level
          </entry>
          <entry>
            INFO
          </entry>
          <entry>
            Logging level
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    [account-replicator]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            log_name
          </entry>
          <entry>
            account-replicator
          </entry>
          <entry>
            Label used when logging
          </entry>
        </row>
        <row>
          <entry>
            log_facility
          </entry>
          <entry>
            LOG_LOCAL0
          </entry>
          <entry>
            Syslog log facility
          </entry>
        </row>
        <row>
          <entry>
            log_level
          </entry>
          <entry>
            INFO
          </entry>
          <entry>
            Logging level
          </entry>
        </row>
        <row>
          <entry>
            per_diff
          </entry>
          <entry>
            1000
          </entry>
          <entry>
          </entry>
        </row>
        <row>
          <entry>
            concurrency
          </entry>
          <entry>
            8
          </entry>
          <entry>
            Number of replication workers to spawn
          </entry>
        </row>
        <row>
          <entry>
            run_pause
          </entry>
          <entry>
            30
          </entry>
          <entry>
            Time in seconds to wait between
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            replication passes
          </entry>
        </row>
        <row>
          <entry>
            node_timeout
          </entry>
          <entry>
            10
          </entry>
          <entry>
            Request timeout to external services
          </entry>
        </row>
        <row>
          <entry>
            conn_timeout
          </entry>
          <entry>
            0.5
          </entry>
          <entry>
            Connection timeout to external services
          </entry>
        </row>
        <row>
          <entry>
            reclaim_age
          </entry>
          <entry>
            604800
          </entry>
          <entry>
            Time elapsed in seconds before an
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            account can be reclaimed
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    [account-auditor]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            log_name
          </entry>
          <entry>
            account-auditor
          </entry>
          <entry>
            Label used when logging
          </entry>
        </row>
        <row>
          <entry>
            log_facility
          </entry>
          <entry>
            LOG_LOCAL0
          </entry>
          <entry>
            Syslog log facility
          </entry>
        </row>
        <row>
          <entry>
            log_level
          </entry>
          <entry>
            INFO
          </entry>
          <entry>
            Logging level
          </entry>
        </row>
        <row>
          <entry>
            interval
          </entry>
          <entry>
            1800
          </entry>
          <entry>
            Minimum time for a pass to take
          </entry>
        </row>
        <row>
          <entry>
            accounts_per_second
          </entry>
          <entry>
            200
          </entry>
          <entry>
            Maximum accounts audited per second.
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            Should be tuned according to individual
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            system specs. 0 is unlimited.
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    [account-reaper]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            log_name
          </entry>
          <entry>
            account-auditor
          </entry>
          <entry>
            Label used when logging
          </entry>
        </row>
        <row>
          <entry>
            log_facility
          </entry>
          <entry>
            LOG_LOCAL0
          </entry>
          <entry>
            Syslog log facility
          </entry>
        </row>
        <row>
          <entry>
            log_level
          </entry>
          <entry>
            INFO
          </entry>
          <entry>
            Logging level
          </entry>
        </row>
        <row>
          <entry>
            concurrency
          </entry>
          <entry>
            25
          </entry>
          <entry>
            Number of replication workers to spawn
          </entry>
        </row>
        <row>
          <entry>
            interval
          </entry>
          <entry>
            3600
          </entry>
          <entry>
            Minimum time for a pass to take
          </entry>
        </row>
        <row>
          <entry>
            node_timeout
          </entry>
          <entry>
            10
          </entry>
          <entry>
            Request timeout to external services
          </entry>
        </row>
        <row>
          <entry>
            conn_timeout
          </entry>
          <entry>
            0.5
          </entry>
          <entry>
            Connection timeout to external services
          </entry>
        </row>
        <row>
          <entry>
            delay_reaping
          </entry>
          <entry>
            0
          </entry>
          <entry>
            Normally, the reaper begins deleting
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            account information for deleted accounts
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            immediately; you can set this to delay
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            its work however. The value is in seconds,
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            2592000 = 30 days, for example.
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
</section>
<section xml:id="proxy-server-configuration">
  <title>Proxy Server Configuration</title>
  <para>
    An example Proxy Server configuration can be found at
    etc/proxy-server.conf-sample in the source code repository.
  </para>
  <para>
    The following configuration options are available:
  </para>
  <para>
    [DEFAULT]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            bind_ip
          </entry>
          <entry>
            0.0.0.0
          </entry>
          <entry>
            IP Address for server to
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            bind to
          </entry>
        </row>
        <row>
          <entry>
            bind_port
          </entry>
          <entry>
            80
          </entry>
          <entry>
            Port for server to bind to
          </entry>
        </row>
        <row>
          <entry>
            bind_timeout
          </entry>
          <entry>
            30
          </entry>
          <entry>
            Seconds to attempt bind before
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            giving up
          </entry>
        </row>
        <row>
          <entry>
            swift_dir
          </entry>
          <entry>
            /etc/swift
          </entry>
          <entry>
            Swift configuration directory
          </entry>
        </row>
        <row>
          <entry>
            workers
          </entry>
          <entry>
            auto
          </entry>
          <entry>
            Override the number of
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            pre-forked workers that will
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            accept connections. If set it
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            should be an integer, zero
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            means no fork. If unset, it
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            will try to default to the
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            number of effective cpu cores
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            and fallback to one. See
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            general-service-tuning
          </entry>
        </row>
        <row>
          <entry>
            max_clients
          </entry>
          <entry>
            1024
          </entry>
          <entry>
            Maximum number of clients one
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            worker can process
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            simultaneously (it will
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            actually accept(2) N +
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            1). Setting this to one (1)
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            will only handle one request at
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            a time, without accepting
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            another request
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            concurrently.
          </entry>
        </row>
        <row>
          <entry>
            user
          </entry>
          <entry>
            swift
          </entry>
          <entry>
            User to run as
          </entry>
        </row>
        <row>
          <entry>
            cert_file
          </entry>
          <entry>
          </entry>
          <entry>
            Path to the ssl .crt. This
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            should be enabled for testing
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            purposes only.
          </entry>
        </row>
        <row>
          <entry>
            key_file
          </entry>
          <entry>
          </entry>
          <entry>
            Path to the ssl .key. This
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            should be enabled for testing
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            purposes only.
          </entry>
        </row>
        <row>
          <entry>
            cors_allow_origin
          </entry>
          <entry>
          </entry>
          <entry>
            This is a list of hosts that
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            are included with any CORS
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            request by default and
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            returned with the
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            Access-Control-Allow-Origin
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            header in addition to what
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            the container has set.
          </entry>
        </row>
        <row>
          <entry>
            log_custom_handlers
          </entry>
          <entry>
            None
          </entry>
          <entry>
            Comma separated list of functions
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            to call to setup custom log
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            handlers.
          </entry>
        </row>
        <row>
          <entry>
            eventlet_debug
          </entry>
          <entry>
            false
          </entry>
          <entry>
            If true, turn on debug logging
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            for eventlet
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    [proxy-server]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            use
          </entry>
          <entry>
          </entry>
          <entry>
            Entry point for paste.deploy for
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            the proxy server. For most
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            cases, this should be
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            egg:swift#proxy.
          </entry>
        </row>
        <row>
          <entry>
            set log_name
          </entry>
          <entry>
            proxy-server
          </entry>
          <entry>
            Label used when logging
          </entry>
        </row>
        <row>
          <entry>
            set log_facility
          </entry>
          <entry>
            LOG_LOCAL0
          </entry>
          <entry>
            Syslog log facility
          </entry>
        </row>
        <row>
          <entry>
            set log_level
          </entry>
          <entry>
            INFO
          </entry>
          <entry>
            Log level
          </entry>
        </row>
        <row>
          <entry>
            set log_headers
          </entry>
          <entry>
            True
          </entry>
          <entry>
            If True, log headers in each
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            request
          </entry>
        </row>
        <row>
          <entry>
            set log_handoffs
          </entry>
          <entry>
            True
          </entry>
          <entry>
            If True, the proxy will log
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            whenever it has to failover to a
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            handoff node
          </entry>
        </row>
        <row>
          <entry>
            recheck_account_existence
          </entry>
          <entry>
            60
          </entry>
          <entry>
            Cache timeout in seconds to
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            send memcached for account
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            existence
          </entry>
        </row>
        <row>
          <entry>
            recheck_container_existence
          </entry>
          <entry>
            60
          </entry>
          <entry>
            Cache timeout in seconds to
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            send memcached for container
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            existence
          </entry>
        </row>
        <row>
          <entry>
            object_chunk_size
          </entry>
          <entry>
            65536
          </entry>
          <entry>
            Chunk size to read from
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            object servers
          </entry>
        </row>
        <row>
          <entry>
            client_chunk_size
          </entry>
          <entry>
            65536
          </entry>
          <entry>
            Chunk size to read from
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            clients
          </entry>
        </row>
        <row>
          <entry>
            memcache_servers
          </entry>
          <entry>
            127.0.0.1:11211
          </entry>
          <entry>
            Comma separated list of
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            memcached servers ip:port
          </entry>
        </row>
        <row>
          <entry>
            memcache_max_connections
          </entry>
          <entry>
            2
          </entry>
          <entry>
            Max number of connections to
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            each memcached server per
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            worker
          </entry>
        </row>
        <row>
          <entry>
            node_timeout
          </entry>
          <entry>
            10
          </entry>
          <entry>
            Request timeout to external
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            services
          </entry>
        </row>
        <row>
          <entry>
            client_timeout
          </entry>
          <entry>
            60
          </entry>
          <entry>
            Timeout to read one chunk
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            from a client
          </entry>
        </row>
        <row>
          <entry>
            conn_timeout
          </entry>
          <entry>
            0.5
          </entry>
          <entry>
            Connection timeout to
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            external services
          </entry>
        </row>
        <row>
          <entry>
            error_suppression_interval
          </entry>
          <entry>
            60
          </entry>
          <entry>
            Time in seconds that must
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            elapse since the last error
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            for a node to be considered
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            no longer error limited
          </entry>
        </row>
        <row>
          <entry>
            error_suppression_limit
          </entry>
          <entry>
            10
          </entry>
          <entry>
            Error count to consider a
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            node error limited
          </entry>
        </row>
        <row>
          <entry>
            allow_account_management
          </entry>
          <entry>
            false
          </entry>
          <entry>
            Whether account PUTs and DELETEs
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            are even callable
          </entry>
        </row>
        <row>
          <entry>
            object_post_as_copy
          </entry>
          <entry>
            true
          </entry>
          <entry>
            Set object_post_as_copy = false
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            to turn on fast posts where only
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            the metadata changes are stored
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            anew and the original data file
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            is kept in place. This makes for
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            quicker posts; but since the
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            container metadata isn't updated
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            in this mode, features like
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            container sync won't be able to
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            sync posts.
          </entry>
        </row>
        <row>
          <entry>
            account_autocreate
          </entry>
          <entry>
            false
          </entry>
          <entry>
            If set to 'true' authorized
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            accounts that do not yet exist
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            within the Swift cluster will
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            be automatically created.
          </entry>
        </row>
        <row>
          <entry>
            max_containers_per_account
          </entry>
          <entry>
            0
          </entry>
          <entry>
            If set to a positive value,
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            trying to create a container
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            when the account already has at
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            least this maximum containers
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            will result in a 403 Forbidden.
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            Note: This is a soft limit,
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            meaning a user might exceed the
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            cap for
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            recheck_account_existence before
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            the 403s kick in.
          </entry>
        </row>
        <row>
          <entry>
            max_containers_whitelist
          </entry>
          <entry>
          </entry>
          <entry>
            This is a comma separated list
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            of account names that ignore
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            the max_containers_per_account
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            cap.
          </entry>
        </row>
        <row>
          <entry>
            rate_limit_after_segment
          </entry>
          <entry>
            10
          </entry>
          <entry>
            Rate limit the download of
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            large object segments after
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            this segment is downloaded.
          </entry>
        </row>
        <row>
          <entry>
            rate_limit_segments_per_sec
          </entry>
          <entry>
            1
          </entry>
          <entry>
            Rate limit large object
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            downloads at this rate.
          </entry>
        </row>
        <row>
          <entry>
            request_node_count
          </entry>
          <entry>
            2 * replicas
          </entry>
          <entry>
            Set to the number of nodes to
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            contact for a normal request.
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            You can use '* replicas' at the
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            end to have it use the number
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            given times the number of
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            replicas for the ring being used
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            for the request.
          </entry>
        </row>
        <row>
          <entry>
            swift_owner_headers
          </entry>
          <entry>
            &lt;see the sample
          </entry>
          <entry>
            These are the headers whose
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
            conf file for
          </entry>
          <entry>
            values will only be shown to
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
            the list of
          </entry>
          <entry>
            swift_owners. The exact
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
            default
          </entry>
          <entry>
            definition of a swift_owner is
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
            headers&gt;
          </entry>
          <entry>
            up to the auth system in use,
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            but usually indicates
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            administrative responsibilities.
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    [tempauth]
  </para>
  <informaltable>
    <tgroup cols="3">
      <colspec align="left" />
      <colspec align="left" />
      <colspec align="left" />
      <thead>
        <row>
          <entry>
            Option
          </entry>
          <entry>
            Default
          </entry>
          <entry>
            Description
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            use
          </entry>
          <entry>
          </entry>
          <entry>
            Entry point for
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            paste.deploy to use for
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            auth. To use tempauth
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            set to:
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            egg:swift#tempauth
          </entry>
        </row>
        <row>
          <entry>
            set log_name
          </entry>
          <entry>
            tempauth
          </entry>
          <entry>
            Label used when logging
          </entry>
        </row>
        <row>
          <entry>
            set log_facility
          </entry>
          <entry>
            LOG_LOCAL0
          </entry>
          <entry>
            Syslog log facility
          </entry>
        </row>
        <row>
          <entry>
            set log_level
          </entry>
          <entry>
            INFO
          </entry>
          <entry>
            Log level
          </entry>
        </row>
        <row>
          <entry>
            set log_headers
          </entry>
          <entry>
            True
          </entry>
          <entry>
            If True, log headers in
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            each request
          </entry>
        </row>
        <row>
          <entry>
            reseller_prefix
          </entry>
          <entry>
            AUTH
          </entry>
          <entry>
            The naming scope for the
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            auth service. Swift
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            storage accounts and
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            auth tokens will begin
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            with this prefix.
          </entry>
        </row>
        <row>
          <entry>
            auth_prefix
          </entry>
          <entry>
            /auth/
          </entry>
          <entry>
            The HTTP request path
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            prefix for the auth
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            service. Swift itself
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            reserves anything
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            beginning with the
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            letter v.
          </entry>
        </row>
        <row>
          <entry>
            token_life
          </entry>
          <entry>
            86400
          </entry>
          <entry>
            The number of seconds a
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            token is valid.
          </entry>
        </row>
        <row>
          <entry>
            storage_url_scheme
          </entry>
          <entry>
            default
          </entry>
          <entry>
            Scheme to return with
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            storage urls: http,
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            https, or default
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            (chooses based on what
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            the server is running
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            as) This can be useful
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            with an SSL load
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            balancer in front of a
          </entry>
        </row>
        <row>
          <entry>
          </entry>
          <entry>
          </entry>
          <entry>
            non-SSL server.
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    Additionally, you need to list all the accounts/users you want here.
    The format is:
  </para>
  <programlisting>
user_&lt;account&gt;_&lt;user&gt; = &lt;key&gt; [group] [group] [...] [storage_url]
</programlisting>
  <para>
    or if you want to be able to include underscores in the
    <literal>&lt;account&gt;</literal> or
    <literal>&lt;user&gt;</literal> portions, you can base64 encode them
    (with <emphasis>no</emphasis> equal signs) in a line like this:
  </para>
  <programlisting>
user64_&lt;account_b64&gt;_&lt;user_b64&gt; = &lt;key&gt; [group] [group] [...] [storage_url]
</programlisting>
  <para>
    There are special groups of:
  </para>
  <programlisting>
.reseller_admin = can do anything to any account for this auth
.admin = can do anything within the account
</programlisting>
  <para>
    If neither of these groups are specified, the user can only access
    containers that have been explicitly allowed for them by a .admin or
    .reseller_admin.
  </para>
  <para>
    The trailing optional storage_url allows you to specify an alternate
    url to hand back to the user upon authentication. If not specified,
    this defaults to:
  </para>
  <programlisting>
$HOST/v1/&lt;reseller_prefix&gt;_&lt;account&gt;
</programlisting>
  <para>
    Where $HOST will do its best to resolve to what the requester would
    need to use to reach this host, &lt;reseller_prefix&gt; is from this
    section, and &lt;account&gt; is from the
    user_&lt;account&gt;_&lt;user&gt; name. Note that $HOST cannot
    possibly handle when you have a load balancer in front of it that
    does https while TempAuth itself runs with http; in such a case,
    you'll have to specify the storage_url_scheme configuration value as
    an override.
  </para>
  <para>
    Here are example entries, required for running the tests:
  </para>
  <programlisting>
user_admin_admin = admin .admin .reseller_admin
user_test_tester = testing .admin
user_test2_tester2 = testing2 .admin
user_test_tester3 = testing3

# account &quot;test_y&quot; and user &quot;tester_y&quot; (note the lack of padding = chars)
user64_dGVzdF95_dGVzdGVyX3k = testing4 .admin
</programlisting>
</section>
<section xml:iderations">
  <title>Memcached Considerations</title>
  <para>
    Several of the Services rely on Memcached for caching certain types
    of lookups, such as auth tokens, and container/account existence.
    Swift does not do any caching of actual object data. Memcached
    should be able to run on any servers that have available RAM and
    CPU. At Rackspace, we run Memcached on the proxy servers. The
    memcache_servers config option in the proxy-server.conf should
    contain all memcached servers.
  </para>
</section>
<section xml:id="system-time">
  <title>System Time</title>
  <para>
    Time may be relative but it is relatively important for Swift! Swift
    uses timestamps to determine which is the most recent version of an
    object. It is very important for the system time on each server in
    the cluster to by synced as closely as possible (more so for the
    proxy server, but in general it is a good idea for all the servers).
    At Rackspace, we use NTP with a local NTP server to ensure that the
    system times are as close as possible. This should also be monitored
    to ensure that the times do not vary too much.
  </para>
</section>
<section xml:id="general-service-tuning">
  <title>General Service Tuning</title>
  <para>
    Most services support either a worker or concurrency value in the
    settings. This allows the services to make effective use of the
    cores available. A good starting point to set the concurrency level
    for the proxy and storage services to 2 times the number of cores
    available. If more than one service is sharing a server, then some
    experimentation may be needed to find the best balance.
  </para>
  <para>
    At Rackspace, our Proxy servers have dual quad core processors,
    giving us 8 cores. Our testing has shown 16 workers to be a pretty
    good balance when saturating a 10g network and gives good CPU
    utilization.
  </para>
  <para>
    Our Storage servers all run together on the same servers. These
    servers have dual quad core processors, for 8 cores total. We run
    the Account, Container, and Object servers with 8 workers each. Most
    of the background jobs are run at a concurrency of 1, with the
    exception of the replicators which are run at a concurrency of 2.
  </para>
  <para>
    The max_clients parameter can be used to adjust the number of client
    requests an individual worker accepts for processing. The fewer
    requests being processed at one time, the less likely a request that
    consumes the worker's CPU time, or blocks in the OS, will negatively
    impact other requests. The more requests being processed at one
    time, the more likely one worker can utilize network and disk
    capacity.
  </para>
  <para>
    On systems that have more cores, and more memory, where one can
    afford to run more workers, raising the number of workers and
    lowering the maximum number of clients serviced per worker can
    lessen the impact of CPU intensive or stalled requests.
  </para>
  <para>
    The above configuration setting should be taken as suggestions and
    testing of configuration settings should be done to ensure best
    utilization of CPU, network connectivity, and disk I/O.
  </para>
</section>
<section xml:iderations">
  <title>Filesystem Considerations</title>
  <para>
    Swift is designed to be mostly filesystem agnostic--the only
    requirement being that the filesystem supports extended attributes
    (xattrs). After thorough testing with our use cases and hardware
    configurations, XFS was the best all-around choice. If you decide to
    use a filesystem other than XFS, we highly recommend thorough
    testing.
  </para>
  <para>
    For distros with more recent kernels (for example Ubuntu 12.04
    Precise), we recommend using the default settings (including the
    default inode size of 256 bytes) when creating the file system:
  </para>
  <programlisting>
mkfs.xfs /dev/sda1
</programlisting>
  <para>
    In the last couple of years, XFS has made great improvements in how
    inodes are allocated and used. Using the default inode size no
    longer has an impact on performance.
  </para>
  <para>
    For distros with older kernels (for example Ubuntu 10.04 Lucid),
    some settings can dramatically impact performance. We recommend the
    following when creating the file system:
  </para>
  <programlisting>
mkfs.xfs -i size=1024 /dev/sda1
</programlisting>
  <para>
    Setting the inode size is important, as XFS stores xattr data in the
    inode. If the metadata is too large to fit in the inode, a new
    extent is created, which can cause quite a performance problem.
    Upping the inode size to 1024 bytes provides enough room to write
    the default metadata, plus a little headroom.
  </para>
  <para>
    The following example mount options are recommended when using XFS:
  </para>
  <programlisting>
mount -t xfs -o noatime,nodiratime,nobarrier,logbufs=8 /dev/sda1 /srv/node/sda
</programlisting>
  <para>
    We do not recommend running Swift on RAID, but if you are using RAID
    it is also important to make sure that the proper sunit and swidth
    settings get set so that XFS can make most efficient use of the RAID
    array.
  </para>
  <para>
    For a standard swift install, all data drives are mounted directly
    under /srv/node (as can be seen in the above example of mounting
    /def/sda1 as /srv/node/sda). If you choose to mount the drives in
    another directory, be sure to set the devices config option in all
    of the server configs to point to the correct directory.
  </para>
  <para>
    Swift uses system calls to reserve space for new objects being
    written into the system. If your filesystem does not support
    fallocate() or posix_fallocate(), be sure to set the
    disable_fallocate = true config parameter in account, container, and
    object server configs.
  </para>
</section>
<section xml:id="general-system-tuning">
  <title>General System Tuning</title>
  <para>
    Rackspace currently runs Swift on Ubuntu Server 10.04, and the
    following changes have been found to be useful for our use cases.
  </para>
  <para>
    The following settings should be in `/etc/sysctl.conf`:
  </para>
  <programlisting>
# disable TIME_WAIT.. wait..
net.ipv4.tcp_tw_recycle=1
net.ipv4.tcp_tw_reuse=1

# disable syn cookies
net.ipv4.tcp_syncookies = 0

# double amount of allowed conntrack
net.ipv4.netfilter.ip_conntrack_max = 262144
</programlisting>
  <para>
    To load the updated sysctl settings, run
    <literal>sudo sysctl -p</literal>
  </para>
  <para>
    A note about changing the TIME_WAIT values. By default the OS will
    hold a port open for 60 seconds to ensure that any remaining packets
    can be received. During high usage, and with the number of
    connections that are created, it is easy to run out of ports. We can
    change this since we are in control of the network. If you are not
    in control of the network, or do not expect high loads, then you may
    not want to adjust those values.
  </para>
</section>
<section xml:iderations">
  <title>Logging Considerations</title>
  <para>
    Swift is set up to log directly to syslog. Every service can be
    configured with the log_facility option to set the syslog log
    facility destination. We recommended using syslog-ng to route the
    logs to specific log files locally on the server and also to remote
    log collecting servers. Additionally, custom log handlers can be
    used via the custom_log_handlers setting.
  </para>
</section>
</section>
