<?xml version="1.0" encoding="utf-8"?>
  <section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0"
  xml:id="SAIO---Swift-All-In-One">
<title>SAIO - Swift All In One</title>
<section xml:id="instructions-for-setting-up-a-development-vm">
  <title>Instructions for setting up a development VM</title>
<section xml:id="page-abstract">
<title>Page Abstract</title>
<para>    This section documents setting up a virtual machine for doing Swift
    development. The virtual machine will emulate running a four node
    Swift cluster.
  </para>
  <itemizedlist>
    <listitem>
      <para>
        Get an Ubuntu 12.04 LTS (Precise Pangolin) server image or try
        something Fedora/CentOS.
      </para>
    </listitem>
    <listitem>
      <para>
        Create guest virtual machine from the image.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Additional information about setting up a Swift development snapshot
    on other distributions is available on the wiki at
    <ulink url="http://wiki.openstack.org/SAIOInstructions">http://wiki.openstack.org/SAIOInstructions</ulink>.
  </para>
</sect1>
</section>
<section xml:id="whats-in-a-your-user-name">
  <title>What's in a &lt;your-user-name&gt;</title>
  <para>
    Much of the configuration described in this guide requires escalated
    root privileges; however, we assume that administrator logs in an
    unprivileged user. Swift processes also run under a separate user
    and group, set by configuration option, and refered as
    &lt;your-user-name&gt;:&lt;your-group-name&gt;. The default user is
    swift, which may not exist on your system.
  </para>
  <blockquote>
    <para>
      <emphasis role="strong">note</emphasis>
    </para>
    <para>
      The instructions in the first first half of this guide are
      expected to be performed as the root user.
    </para>
  </blockquote>
</section>
<section xml:id="installing-dependencies">
  <title>Installing dependencies</title>
  <itemizedlist>
    <listitem>
      <para>
        On apt based systems,
      </para>
      <orderedlist>
        <listitem>
          <para>
            apt-get update
          </para>
        </listitem>
        <listitem>
          <para>
            apt-get install curl gcc memcached rsync sqlite3 xfsprogs git-core libffi-dev python-setuptools
          </para>
        </listitem>
        <listitem>
          <para>
            apt-get install python-coverage python-dev python-nose python-simplejson
            python-xattr python-eventlet python-greenlet python-pastedeploy
            python-netifaces python-pip python-dnspython python-mock
          </para>
        </listitem>
      </orderedlist>
    </listitem>
    <listitem>
      <para>
        On yum based systems,
      </para>
      <orderedlist>
        <listitem>
          <para>
            yum install curl gcc memcached rsync sqlite xfsprogs git-core libffi-devel xinetd python-setuptools
          </para>
        </listitem>
        <listitem>
          <para>
            yum install python-coverage python-devel python-nose python-simplejson
            python-xattr python-eventlet python-greenlet python-pastedeploy
            python-netifaces python-pip python-dnspython python-mock
          </para>
        </listitem>
      </orderedlist>
      <para>
        This installs necessary system dependencies; and
        <emphasis>most</emphasis> of the python dependencies. Later in
        the process setuptools/distribute or pip will install and/or
        upgrade some other stuff - it's getting harder to avoid. You can
        also install anything else you want, like screen, ssh, vim, etc.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Next, choose either partition-section or loopback-section.
  </para>
<section xml:id="using-a-partition-for-storage">
    <title>Using a partition for storage</title>
    <para>
      If you are going to use a separate partition for Swift data, be
      sure to add another device when creating the VM, and follow these
      instructions.
    </para>
    <blockquote>
      <orderedlist>
        <listitem>
          <para>
            fdisk /dev/sdb (set up a single partition)
          </para>
        </listitem>
        <listitem>
          <para>
            mkfs.xfs /dev/sdb1
          </para>
        </listitem>
        <listitem>
          <variablelist>
            <varlistentry>
              <term>
                Edit /etc/fstab and add
              </term>
              <listitem>
                <para>
                  /dev/sdb1 /mnt/sdb1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
        <listitem>
          <para>
            mkdir /mnt/sdb1
          </para>
        </listitem>
        <listitem>
          <para>
            mount /mnt/sdb1
          </para>
        </listitem>
        <listitem>
          <para>
            mkdir /mnt/sdb1/1 /mnt/sdb1/2 /mnt/sdb1/3 /mnt/sdb1/4
          </para>
        </listitem>
        <listitem>
          <para>
            chown &lt;your-user-name&gt;:&lt;your-group-name&gt; /mnt/sdb1/*
          </para>
        </listitem>
        <listitem>
          <para>
            mkdir /srv
          </para>
        </listitem>
        <listitem>
          <para>
            for x in {1..4}; do ln -s /mnt/sdb1/$x /srv/$x; done
          </para>
        </listitem>
        <listitem>
          <para>
            mkdir -p /etc/swift/object-server /etc/swift/container-server /etc/swift/account-server /srv/1/node/sdb1 /srv/2/node/sdb2 /srv/3/node/sdb3 /srv/4/node/sdb4 /var/run/swift
          </para>
        </listitem>
        <listitem>
          <para>
            chown -R &lt;your-user-name&gt;:&lt;your-group-name&gt; /etc/swift /srv/[1-4]/ /var/run/swift
            -- <emphasis role="strong">Make sure to include the trailing
            slash after /srv/[1-4]/</emphasis>
          </para>
        </listitem>
        <listitem>
          <para>
            Add to /etc/rc.local (before the exit 0):
          </para>
          <programlisting>
mkdir -p /var/cache/swift /var/cache/swift2 /var/cache/swift3 /var/cache/swift4
chown &lt;your-user-name&gt;:&lt;your-group-name&gt; /var/cache/swift*
mkdir -p /var/run/swift
chown &lt;your-user-name&gt;:&lt;your-group-name&gt; /var/run/swift
</programlisting>
        </listitem>
        <listitem>
          <para>
            Next, skip to rsync-section.
          </para>
        </listitem>
      </orderedlist>
    </blockquote>
</section>
<section xml:id="using-a-loopback-device-for-storage">
    <title>Using a loopback device for storage</title>
    <para>
      If you want to use a loopback device instead of another partition,
      follow these instructions.
    </para>
    <blockquote>
      <orderedlist>
        <listitem>
          <para>
            mkdir /srv
          </para>
        </listitem>
        <listitem>
          <variablelist>
            <varlistentry>
              <term>
                truncate -s 1GB /srv/swift-disk
              </term>
              <listitem>
                <para>
                  (modify size to make a larger or smaller partition)
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
        <listitem>
          <para>
            mkfs.xfs /srv/swift-disk
          </para>
        </listitem>
        <listitem>
          <variablelist>
            <varlistentry>
              <term>
                Edit /etc/fstab and add
              </term>
              <listitem>
                <para>
                  /srv/swift-disk /mnt/sdb1 xfs loop,noatime,nodiratime,nobarrier,logbufs=8 0 0
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
        <listitem>
          <para>
            mkdir /mnt/sdb1
          </para>
        </listitem>
        <listitem>
          <para>
            mount /mnt/sdb1
          </para>
        </listitem>
        <listitem>
          <para>
            mkdir /mnt/sdb1/1 /mnt/sdb1/2 /mnt/sdb1/3 /mnt/sdb1/4
          </para>
        </listitem>
        <listitem>
          <para>
            chown &lt;your-user-name&gt;:&lt;your-group-name&gt; /mnt/sdb1/*
          </para>
        </listitem>
        <listitem>
          <para>
            for x in {1..4}; do ln -s /mnt/sdb1/$x /srv/$x; done
          </para>
        </listitem>
        <listitem>
          <para>
            mkdir -p /etc/swift/object-server /etc/swift/container-server /etc/swift/account-server /srv/1/node/sdb1 /srv/2/node/sdb2 /srv/3/node/sdb3 /srv/4/node/sdb4 /var/run/swift
          </para>
        </listitem>
        <listitem>
          <para>
            chown -R &lt;your-user-name&gt;:&lt;your-group-name&gt; /etc/swift /srv/[1-4]/ /var/run/swift
            -- <emphasis role="strong">Make sure to include the trailing
            slash after /srv/[1-4]/</emphasis>
          </para>
        </listitem>
        <listitem>
          <para>
            Add to /etc/rc.local (before the exit 0):
          </para>
          <programlisting>
mkdir -p /var/cache/swift /var/cache/swift2 /var/cache/swift3 /var/cache/swift4
chown &lt;your-user-name&gt;:&lt;your-group-name&gt; /var/cache/swift*
mkdir -p /var/run/swift
chown &lt;your-user-name&gt;:&lt;your-group-name&gt; /var/run/swift
</programlisting>
          <para>
            Note that on some systems you might have to create
            /etc/rc.local.
          </para>
          <para>
            On Fedora 19 or later, you need to place these in
            /etc/rc.d/rc.local.
          </para>
        </listitem>
      </orderedlist>
    </blockquote>
</section>
</section>
<section xml:id="setting-up-rsync">
  <title>Setting up rsync</title>
  <blockquote>
    <orderedlist>
      <listitem>
        <para>
          Create /etc/rsyncd.conf:
        </para>
        <programlisting>
uid = &lt;your-user-name&gt;
gid = &lt;your-group-name&gt;
log file = /var/log/rsyncd.log
pid file = /var/run/rsyncd.pid
address = 127.0.0.1

[account6012]
max connections = 25
path = /srv/1/node/
read only = false
lock file = /var/lock/account6012.lock

[account6022]
max connections = 25
path = /srv/2/node/
read only = false
lock file = /var/lock/account6022.lock

[account6032]
max connections = 25
path = /srv/3/node/
read only = false
lock file = /var/lock/account6032.lock

[account6042]
max connections = 25
path = /srv/4/node/
read only = false
lock file = /var/lock/account6042.lock

[container6011]
max connections = 25
path = /srv/1/node/
read only = false
lock file = /var/lock/container6011.lock

[container6021]
max connections = 25
path = /srv/2/node/
read only = false
lock file = /var/lock/container6021.lock

[container6031]
max connections = 25
path = /srv/3/node/
read only = false
lock file = /var/lock/container6031.lock

[container6041]
max connections = 25
path = /srv/4/node/
read only = false
lock file = /var/lock/container6041.lock

[object6010]
max connections = 25
path = /srv/1/node/
read only = false
lock file = /var/lock/object6010.lock

[object6020]
max connections = 25
path = /srv/2/node/
read only = false
lock file = /var/lock/object6020.lock

[object6030]
max connections = 25
path = /srv/3/node/
read only = false
lock file = /var/lock/object6030.lock

[object6040]
max connections = 25
path = /srv/4/node/
read only = false
lock file = /var/lock/object6040.lock
</programlisting>
      </listitem>
      <listitem>
        <para>
          On Ubuntu, edit the following line in `/etc/default/rsync`:
        </para>
        <programlisting>
RSYNC_ENABLE=true
</programlisting>
        <para>
          On Fedora, edit the following line in `/etc/xinetd.d/rsync`:
        </para>
        <programlisting>
disable = no
</programlisting>
      </listitem>
      <listitem>
        <para>
          On platforms with SELinux in Enforcing mode, either set to
          `Permissive`:
        </para>
        <programlisting>
setenforce Permissive
</programlisting>
        <para>
          Or just allow rsync full access:
        </para>
        <programlisting>
setsebool -P rsync_full_access 1
</programlisting>
      </listitem>
      <listitem>
        <para>
          On Ubuntu, run service rsync restart
        </para>
        <para>
          On Fedora, run:
        </para>
        <programlisting>
systemctl enable rsyncd.service
systemctl start rsyncd.service
</programlisting>
        <para>
          On other xinetd based systems run service xinetd restart.
        </para>
      </listitem>
      <listitem>
        <para>
          Verify rsync is accepting connections for all servers:
        </para>
        <programlisting>
rsync rsync://pub@localhost/
</programlisting>
      </listitem>
    </orderedlist>
  </blockquote>
</section>
<section xml:id="starting-memcached">
  <title>Starting memcached</title>
  <para>
    On non-Ubuntu distros you need to ensure memcached is running:
  </para>
  <blockquote>
    <itemizedlist>
      <listitem>
        <para>
          service memcached start
        </para>
      </listitem>
      <listitem>
        <para>
          chkconfig memcached on
        </para>
      </listitem>
    </itemizedlist>
  </blockquote>
  <para>
    or:
  </para>
  <blockquote>
    <itemizedlist>
      <listitem>
        <para>
          systemctl enable memcached.service
        </para>
      </listitem>
      <listitem>
        <para>
          systemctl start memcached.service
        </para>
      </listitem>
    </itemizedlist>
  </blockquote>
  <para>
    The tempauth middleware stores tokens in memcached. If memcached is
    not running, tokens cannot be validated, and accessing Swift becomes
    impossible.
  </para>
</section>
<section xml:idual-logging">
  <title>Optional: Setting up rsyslog for individual logging</title>
  <blockquote>
    <orderedlist>
      <listitem>
        <para>
          Create /etc/rsyslog.d/10-swift.conf:
        </para>
        <programlisting>
# Uncomment the following to have a log containing all logs together
#local1,local2,local3,local4,local5.*   /var/log/swift/all.log

# Uncomment the following to have hourly proxy logs for stats processing
#$template HourlyProxyLog,&quot;/var/log/swift/hourly/%$YEAR%%$MONTH%%$DAY%%$HOUR%&quot;
#local1.*;local1.!notice ?HourlyProxyLog

local1.*;local1.!notice /var/log/swift/proxy.log
local1.notice           /var/log/swift/proxy.error
local1.*                ~

local2.*;local2.!notice /var/log/swift/storage1.log
local2.notice           /var/log/swift/storage1.error
local2.*                ~

local3.*;local3.!notice /var/log/swift/storage2.log
local3.notice           /var/log/swift/storage2.error
local3.*                ~

local4.*;local4.!notice /var/log/swift/storage3.log
local4.notice           /var/log/swift/storage3.error
local4.*                ~

local5.*;local5.!notice /var/log/swift/storage4.log
local5.notice           /var/log/swift/storage4.error
local5.*                ~
</programlisting>
      </listitem>
      <listitem>
        <para>
          Edit /etc/rsyslog.conf and make the following change:
        </para>
        <programlisting>
$PrivDropToGroup adm
</programlisting>
      </listitem>
      <listitem>
        <para>
          mkdir -p /var/log/swift/hourly
        </para>
      </listitem>
      <listitem>
        <para>
          On Ubuntu:
        </para>
      </listitem>
      <listitem>
        <para>
          chown -R syslog.adm /var/log/swift
        </para>
      </listitem>
      <listitem>
        <para>
          chmod -R g+w /var/log/swift
        </para>
      </listitem>
      <listitem>
        <para>
          service rsyslog restart
        </para>
      </listitem>
      <listitem>
        <para>
          On Fedora:
        </para>
      </listitem>
      <listitem>
        <para>
          chown -R root:adm /var/log/swift
        </para>
      </listitem>
      <listitem>
        <para>
          chmod -R g+w /var/log/swift
        </para>
      </listitem>
      <listitem>
        <para>
          systemctl restart rsyslog.service
        </para>
      </listitem>
    </orderedlist>
  </blockquote>
  <blockquote>
    <para>
      <emphasis role="strong">note</emphasis>
    </para>
    <para>
      Starting here, from this point on, all instructions are expected
      to be performed as the unprivledged user you selected as
      &lt;your-user-name&gt;.
    </para>
  </blockquote>
</section>
<section xml:id="getting-the-code">
  <title>Getting the code</title>
  <blockquote>
    <orderedlist>
      <listitem>
        <variablelist>
          <varlistentry>
            <term>
              Check out the python-swiftclient repo
            </term>
            <listitem>
              <para>
                git clone https://github.com/openstack/python-swiftclient.git
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </listitem>
      <listitem>
        <variablelist>
          <varlistentry>
            <term>
              Build a development installation of python-swiftclient
            </term>
            <listitem>
              <para>
                cd ~/python-swiftclient; sudo python setup.py develop; cd -
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </listitem>
      <listitem>
        <variablelist>
          <varlistentry>
            <term>
              Check out the swift repo
            </term>
            <listitem>
              <para>
                git clone https://github.com/openstack/swift.git
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </listitem>
      <listitem>
        <variablelist>
          <varlistentry>
            <term>
              Build a development installation of swift
            </term>
            <listitem>
              <para>
                cd ~/swift; sudo python setup.py develop; cd -
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </listitem>
      <listitem>
        <variablelist>
          <varlistentry>
            <term>
              Install swift's test dependencies
            </term>
            <listitem>
              <para>
                sudo pip install -r swift/test-requirements.txt
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </listitem>
    </orderedlist>
  </blockquote>
  <para>
    Fedora 19 or later users might have to perform the following if
    development installation of swift fails:
  </para>
  <programlisting>
sudo pip install -U xattr dnspython
</programlisting>
</section>
<section xml:id="configuring-each-node">
  <title>Configuring each node</title>
  <para>
    Sample configuration files are provided with all defaults in
    line-by-line comments.
  </para>
  <blockquote>
    <orderedlist>
      <listitem>
        <para>
          Create `/etc/swift/proxy-server.conf`:
        </para>
        <programlisting>
[DEFAULT]
bind_port = 8080
workers = 1
user = &lt;your-user-name&gt;
log_facility = LOG_LOCAL1
eventlet_debug = true

[pipeline:main]
# Yes, proxy-logging appears twice. This is not a mistake.
pipeline = healthcheck proxy-logging cache tempauth proxy-logging proxy-server

[app:proxy-server]
use = egg:swift#proxy
allow_account_management = true
account_autocreate = true

[filter:tempauth]
use = egg:swift#tempauth
user_admin_admin = admin .admin .reseller_admin
user_test_tester = testing .admin
user_test2_tester2 = testing2 .admin
user_test_tester3 = testing3

[filter:healthcheck]
use = egg:swift#healthcheck

[filter:cache]
use = egg:swift#memcache

[filter:proxy-logging]
use = egg:swift#proxy_logging
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `/etc/swift/swift.conf`:
        </para>
        <programlisting>
[swift-hash]
# random unique strings that can never change (DO NOT LOSE)
swift_hash_path_prefix = changeme
swift_hash_path_suffix = changeme
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `/etc/swift/account-server/1.conf`:
        </para>
        <programlisting>
[DEFAULT]
devices = /srv/1/node
mount_check = false
disable_fallocate = true
bind_port = 6012
workers = 1
user = &lt;your-user-name&gt;
log_facility = LOG_LOCAL2
recon_cache_path = /var/cache/swift
eventlet_debug = true

[pipeline:main]
pipeline = recon account-server

[app:account-server]
use = egg:swift#account

[filter:recon]
use = egg:swift#recon

[account-replicator]
vm_test_mode = yes

[account-auditor]

[account-reaper]
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `/etc/swift/account-server/2.conf`:
        </para>
        <programlisting>
[DEFAULT]
devices = /srv/2/node
mount_check = false
disable_fallocate = true
bind_port = 6022
workers = 1
user = &lt;your-user-name&gt;
log_facility = LOG_LOCAL3
recon_cache_path = /var/cache/swift2
eventlet_debug = true

[pipeline:main]
pipeline = recon account-server

[app:account-server]
use = egg:swift#account

[filter:recon]
use = egg:swift#recon

[account-replicator]
vm_test_mode = yes

[account-auditor]

[account-reaper]
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `/etc/swift/account-server/3.conf`:
        </para>
        <programlisting>
[DEFAULT]
devices = /srv/3/node
mount_check = false
disable_fallocate = true
bind_port = 6032
workers = 1
user = &lt;your-user-name&gt;
log_facility = LOG_LOCAL4
recon_cache_path = /var/cache/swift3
eventlet_debug = true

[pipeline:main]
pipeline = recon account-server

[app:account-server]
use = egg:swift#account

[filter:recon]
use = egg:swift#recon

[account-replicator]
vm_test_mode = yes

[account-auditor]

[account-reaper]
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `/etc/swift/account-server/4.conf`:
        </para>
        <programlisting>
[DEFAULT]
devices = /srv/4/node
mount_check = false
disable_fallocate = true
bind_port = 6042
workers = 1
user = &lt;your-user-name&gt;
log_facility = LOG_LOCAL5
recon_cache_path = /var/cache/swift4
eventlet_debug = true

[pipeline:main]
pipeline = recon account-server

[app:account-server]
use = egg:swift#account

[filter:recon]
use = egg:swift#recon

[account-replicator]
vm_test_mode = yes

[account-auditor]

[account-reaper]
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `/etc/swift/container-server/1.conf`:
        </para>
        <programlisting>
[DEFAULT]
devices = /srv/1/node
mount_check = false
disable_fallocate = true
bind_port = 6011
workers = 1
user = &lt;your-user-name&gt;
log_facility = LOG_LOCAL2
recon_cache_path = /var/cache/swift
eventlet_debug = true

[pipeline:main]
pipeline = recon container-server

[app:container-server]
use = egg:swift#container

[filter:recon]
use = egg:swift#recon

[container-replicator]
vm_test_mode = yes

[container-updater]

[container-auditor]

[container-sync]
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `/etc/swift/container-server/2.conf`:
        </para>
        <programlisting>
[DEFAULT]
devices = /srv/2/node
mount_check = false
disable_fallocate = true
bind_port = 6021
workers = 1
user = &lt;your-user-name&gt;
log_facility = LOG_LOCAL3
recon_cache_path = /var/cache/swift2
eventlet_debug = true

[pipeline:main]
pipeline = recon container-server

[app:container-server]
use = egg:swift#container

[filter:recon]
use = egg:swift#recon

[container-replicator]
vm_test_mode = yes

[container-updater]

[container-auditor]

[container-sync]
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `/etc/swift/container-server/3.conf`:
        </para>
        <programlisting>
[DEFAULT]
devices = /srv/3/node
mount_check = false
disable_fallocate = true
bind_port = 6031
workers = 1
user = &lt;your-user-name&gt;
log_facility = LOG_LOCAL4
recon_cache_path = /var/cache/swift3
eventlet_debug = true

[pipeline:main]
pipeline = recon container-server

[app:container-server]
use = egg:swift#container

[filter:recon]
use = egg:swift#recon

[container-replicator]
vm_test_mode = yes

[container-updater]

[container-auditor]

[container-sync]
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `/etc/swift/container-server/4.conf`:
        </para>
        <programlisting>
[DEFAULT]
devices = /srv/4/node
mount_check = false
disable_fallocate = true
bind_port = 6041
workers = 1
user = &lt;your-user-name&gt;
log_facility = LOG_LOCAL5
recon_cache_path = /var/cache/swift4
eventlet_debug = true

[pipeline:main]
pipeline = recon container-server

[app:container-server]
use = egg:swift#container

[filter:recon]
use = egg:swift#recon

[container-replicator]
vm_test_mode = yes

[container-updater]

[container-auditor]

[container-sync]
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `/etc/swift/object-server/1.conf`:
        </para>
        <programlisting>
[DEFAULT]
devices = /srv/1/node
mount_check = false
disable_fallocate = true
bind_port = 6010
workers = 1
user = &lt;your-user-name&gt;
log_facility = LOG_LOCAL2
recon_cache_path = /var/cache/swift
eventlet_debug = true

[pipeline:main]
pipeline = recon object-server

[app:object-server]
use = egg:swift#object

[filter:recon]
use = egg:swift#recon

[object-replicator]
vm_test_mode = yes

[object-updater]

[object-auditor]
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `/etc/swift/object-server/2.conf`:
        </para>
        <programlisting>
[DEFAULT]
devices = /srv/2/node
mount_check = false
disable_fallocate = true
bind_port = 6020
workers = 1
user = &lt;your-user-name&gt;
log_facility = LOG_LOCAL3
recon_cache_path = /var/cache/swift2
eventlet_debug = true

[pipeline:main]
pipeline = recon object-server

[app:object-server]
use = egg:swift#object

[filter:recon]
use = egg:swift#recon

[object-replicator]
vm_test_mode = yes

[object-updater]

[object-auditor]
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `/etc/swift/object-server/3.conf`:
        </para>
        <programlisting>
[DEFAULT]
devices = /srv/3/node
mount_check = false
disable_fallocate = true
bind_port = 6030
workers = 1
user = &lt;your-user-name&gt;
log_facility = LOG_LOCAL4
recon_cache_path = /var/cache/swift3
eventlet_debug = true

[pipeline:main]
pipeline = recon object-server

[app:object-server]
use = egg:swift#object

[filter:recon]
use = egg:swift#recon

[object-replicator]
vm_test_mode = yes

[object-updater]

[object-auditor]
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `/etc/swift/object-server/4.conf`:
        </para>
        <programlisting>
[DEFAULT]
devices = /srv/4/node
mount_check = false
disable_fallocate = true
bind_port = 6040
workers = 1
user = &lt;your-user-name&gt;
log_facility = LOG_LOCAL5
recon_cache_path = /var/cache/swift4
eventlet_debug = true

[pipeline:main]
pipeline = recon object-server

[app:object-server]
use = egg:swift#object

[filter:recon]
use = egg:swift#recon

[object-replicator]
vm_test_mode = yes

[object-updater]

[object-auditor]
</programlisting>
      </listitem>
      <listitem>
        <para>
          Update &lt;your-user-name&gt;:
        </para>
        <programlisting>
find /etc/swift/ -name \*.conf | xargs sed -i &quot;s/&lt;your-user-name&gt;/${USER}/&quot;
</programlisting>
      </listitem>
    </orderedlist>
  </blockquote>
</section>
<section xml:id="setting-up-scripts-for-running-swift">
  <title>Setting up scripts for running Swift</title>
  <blockquote>
    <orderedlist>
      <listitem>
        <para>
          mkdir ~/bin
        </para>
      </listitem>
      <listitem>
        <para>
          Create ~/bin/resetswift.
        </para>
        <para>
          If you are using a loopback device substitute /dev/sdb1 with
          /srv/swift-disk in the mkfs step.
        </para>
        <para>
          If you did not set up rsyslog for individual logging, remove
          the find
          /var/log/swift... line.
        </para>
        <para>
          On Fedora, replace service &lt;name&gt;` restart` with
          systemctl restart &lt;name&gt;`.service`:
        </para>
        <programlisting>
#!/bin/bash

swift-init all stop
find /var/log/swift -type f -exec rm -f {} \;
sudo umount /mnt/sdb1
sudo mkfs.xfs -f /dev/sdb1
sudo mount /mnt/sdb1
sudo mkdir /mnt/sdb1/1 /mnt/sdb1/2 /mnt/sdb1/3 /mnt/sdb1/4
sudo chown &lt;your-user-name&gt;:&lt;your-group-name&gt; /mnt/sdb1/*
mkdir -p /srv/1/node/sdb1 /srv/2/node/sdb2 /srv/3/node/sdb3 /srv/4/node/sdb4
sudo rm -f /var/log/debug /var/log/messages /var/log/rsyncd.log /var/log/syslog
find /var/cache/swift* -type f -name *.recon -exec rm -f {} \;
sudo service rsyslog restart
sudo service memcached restart
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `~/bin/remakerings`:
        </para>
        <programlisting>
#!/bin/bash

cd /etc/swift

rm -f *.builder *.ring.gz backups/*.builder backups/*.ring.gz

swift-ring-builder object.builder create 10 3 1
swift-ring-builder object.builder add r1z1-127.0.0.1:6010/sdb1 1
swift-ring-builder object.builder add r1z2-127.0.0.1:6020/sdb2 1
swift-ring-builder object.builder add r1z3-127.0.0.1:6030/sdb3 1
swift-ring-builder object.builder add r1z4-127.0.0.1:6040/sdb4 1
swift-ring-builder object.builder rebalance
swift-ring-builder container.builder create 10 3 1
swift-ring-builder container.builder add r1z1-127.0.0.1:6011/sdb1 1
swift-ring-builder container.builder add r1z2-127.0.0.1:6021/sdb2 1
swift-ring-builder container.builder add r1z3-127.0.0.1:6031/sdb3 1
swift-ring-builder container.builder add r1z4-127.0.0.1:6041/sdb4 1
swift-ring-builder container.builder rebalance
swift-ring-builder account.builder create 10 3 1
swift-ring-builder account.builder add r1z1-127.0.0.1:6012/sdb1 1
swift-ring-builder account.builder add r1z2-127.0.0.1:6022/sdb2 1
swift-ring-builder account.builder add r1z3-127.0.0.1:6032/sdb3 1
swift-ring-builder account.builder add r1z4-127.0.0.1:6042/sdb4 1
swift-ring-builder account.builder rebalance
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `~/bin/startmain`:
        </para>
        <programlisting>
#!/bin/bash

swift-init main start
</programlisting>
      </listitem>
      <listitem>
        <para>
          Create `~/bin/startrest`:
        </para>
        <programlisting>
#!/bin/bash

swift-init rest start
</programlisting>
      </listitem>
      <listitem>
        <para>
          chmod +x ~/bin/*
        </para>
      </listitem>
      <listitem>
        <para>
          Edit ~/.bashrc and add to the end:
        </para>
        <programlisting>
export SWIFT_TEST_CONFIG_FILE=/etc/swift/test.conf
export PATH=${PATH}:~/bin
</programlisting>
      </listitem>
      <listitem>
        <para>
          . ~/.bashrc
        </para>
      </listitem>
      <listitem>
        <para>
          remakerings
        </para>
      </listitem>
      <listitem>
        <para>
          cp ~/swift/test/sample.conf /etc/swift/test.conf
        </para>
      </listitem>
      <listitem>
        <para>
          ~/swift/.unittests
        </para>
      </listitem>
      <listitem>
        <para>
          startmain (The
          <literal>Unable to increase file descriptor limit.  Running as non-root?</literal>
          warnings are expected and ok.)
        </para>
      </listitem>
      <listitem>
        <para>
          Get an X-Storage-Url and `X-Auth-Token`:
          <literal>curl -v -H 'X-Storage-User: test:tester' -H 'X-Storage-Pass: testing' http://127.0.0.1:8080/auth/v1.0</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          Check that you can GET account:
          <literal>curl -v -H 'X-Auth-Token: &lt;token-from-x-auth-token-above&gt;' &lt;url-from-x-storage-url-above&gt;</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          Check that swift works:
          swift -A http://127.0.0.1:8080/auth/v1.0 -U test:tester -K testing stat
        </para>
      </listitem>
      <listitem>
        <para>
          ~/swift/.functests (Note: functional tests will first delete
          everything in the configured accounts.)
        </para>
      </listitem>
      <listitem>
        <para>
          ~/swift/.probetests (Note: probe tests will reset your
          environment as they call resetswift for each test.)
        </para>
      </listitem>
    </orderedlist>
  </blockquote>
</section>
<section xml:id="debugging-issues">
  <title>Debugging Issues</title>
  <para>
    If all doesn't go as planned, and tests fail, or you can't auth, or
    something doesn't work, here are some good starting places to look
    for issues:
  </para>
  <orderedlist>
    <listitem>
      <para>
        Everything is logged using system facilities -- usually in
        /var/log/syslog, but possibly in /var/log/messages on e.g.
        Fedora -- so that is a good first place to look for errors (most
        likely python tracebacks).
      </para>
    </listitem>
    <listitem>
      <para>
        Make sure all of the server processes are running. For the base
        functionality, the Proxy, Account, Container, and Object servers
        should be running.
      </para>
    </listitem>
    <listitem>
      <para>
        If one of the servers are not running, and no errors are logged
        to syslog, it may be useful to try to start the server manually,
        for example: swift-object-server /etc/swift/object-server/1.conf
        will start the object server. If there are problems not showing
        up in syslog, then you will likely see the traceback on startup.
      </para>
    </listitem>
    <listitem>
      <para>
        If you need to, you can turn off syslog for unit tests. This can
        be useful for environments where /dev/log is unavailable, or
        which cannot rate limit (unit tests generate a lot of logs very
        quickly). Open the file SWIFT_TEST_CONFIG_FILE points to, and
        change the value of fake_syslog to True.
      </para>
    </listitem>
  </orderedlist>
</section>
</section>
