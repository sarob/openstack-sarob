<?xml version="1.0" encoding="utf-8"?>
  <section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0"
  xml:id="Configuring-Services-to-work-with-Keystone">
<title>Configuring Services to work with Keystone</title>
<section xml:id="page-abstract">
<title>Page Abstract</title>
<para>  Once Keystone is installed and running (see configuration_), services
  need to be configured to work with it. To do this, we primarily
  install and configure middleware for the OpenStack service to handle
  authentication tasks or otherwise interact with Keystone.
</para>
<para>
  In general:
</para>
<itemizedlist>
  <listitem>
    <para>
      Clients making calls to the service will pass in an authentication
      token.
    </para>
  </listitem>
  <listitem>
    <para>
      The Keystone middleware will look for and validate that token,
      taking the appropriate action.
    </para>
  </listitem>
  <listitem>
    <para>
      It will also retrive additional information from the token such as
      user name, id, tenant name, id, roles, etc...
    </para>
  </listitem>
</itemizedlist>
<para>
  The middleware will pass those data down to the service as headers.
  More details on the architecture of that setup is described in
  middlewarearchitecture_
</para>
</section>
<section xml:id="setting-up-credentials">
  <title>Setting up credentials</title>
<section xml:id="admin-token">
    <title>Admin Token</title>
    <para>
      For a default installation of Keystone, before you can use the
      REST API, you need to define an authorization token. This is
      configured in <literal>keystone.conf</literal> file under the
      section <literal>[DEFAULT]</literal>. In the sample file provided
      with the keystone project, the line defining this token is:
    </para>
    <programlisting>
[DEFAULT]
admin_token = ADMIN
</programlisting>
    <para>
      This configured token is a &quot;shared secret&quot; between
      keystone and other openstack services, and is used by the client
      to communicate with the API to create tenants, users, roles, etc.
    </para>
</section>
<section xml:id="setting-up-tenants-users-and-roles">
    <title>Setting up tenants, users, and roles</title>
    <para>
      You need to minimally define a tenant, user, and role to link the
      tenant and user as the most basic set of details to get other
      services authenticating and authorizing with keystone.
    </para>
    <para>
      You will also want to create service users for nova, glance,
      swift, etc. to be able to use to authenticate users against
      keystone. The <literal>auth_token</literal> middleware supports
      using either the shared secret described above as admin_token or
      users for each service.
    </para>
    <para>
      See configuration_ for a walk through on how to create tenants,
      users, and roles.
    </para>
</section>
</section>
<section xml:id="setting-up-services">
  <title>Setting up services</title>
<section xml:id="creating-service-users">
    <title>Creating Service Users</title>
    <para>
      To configure the OpenStack services with service users, we need to
      create a tenant for all the services, and then users for each of
      the services. We then assign those service users an Admin role on
      the service tenant. This allows them to validate tokens - and
      authenticate and authorize other user requests.
    </para>
    <para>
      Create a tenant for the services, typically named 'service'
      (however, the name can be whatever you choose):
    </para>
    <programlisting>
keystone tenant-create --name=service
</programlisting>
    <para>
      This returns a UUID of the tenant - keep that, you'll need it when
      creating the users and specifying the roles.
    </para>
    <para>
      Create service users for nova, glance, swift, and neutron (or
      whatever subset is relevant to your deployment):
    </para>
    <programlisting>
keystone user-create --name=nova \
                     --pass=Sekr3tPass \
                     --tenant_id=[the uuid of the tenant] \
                     --email=nova@nothing.com
</programlisting>
    <para>
      Repeat this for each service you want to enable. Email is a
      required field in keystone right now, but not used in relation to
      the service accounts. Each of these commands will also return a
      UUID of the user. Keep those to assign the Admin role.
    </para>
    <para>
      For adding the Admin role to the service accounts, you'll need to
      know the UUID of the role you want to add. If you don't have them
      handy, you can look it up quickly with:
    </para>
    <programlisting>
keystone role-list
</programlisting>
    <para>
      Once you have it, assign the service users to the Admin role. This
      is all assuming that you've already created the basic roles and
      settings as described in configuration_:
    </para>
    <blockquote>
      <para>
        keystone user-role-add --tenant_id=[uuid of the service tenant]
         --user=[uuid of the service account]
         --role=[uuid of the Admin role]
      </para>
    </blockquote>
</section>
<section xml:id="defining-services">
    <title>Defining Services</title>
    <para>
      Keystone also acts as a service catalog to let other OpenStack
      systems know where relevant API endpoints exist for OpenStack
      Services. The OpenStack Dashboard, in particular, uses this
      heavily - and this <emphasis role="strong">must</emphasis> be
      configured for the OpenStack Dashboard to properly function.
    </para>
    <para>
      The endpoints for these services are defined in a template, an
      example of which is in the project as the file
      <literal>etc/default_catalog.templates</literal>.
    </para>
    <para>
      Keystone supports two means of defining the services, one is the
      catalog template, as described above - in which case everything is
      detailed in that template.
    </para>
    <para>
      The other is a SQL backend for the catalog service, in which case
      after keystone is online, you need to add the services to the
      catalog:
    </para>
    <programlisting>
keystone service-create --name=nova \
                               --type=compute \
                               --description=&quot;Nova Compute Service&quot;
keystone service-create --name=ec2 \
                               --type=ec2 \
                               --description=&quot;EC2 Compatibility Layer&quot;
keystone service-create --name=glance \
                               --type=image \
                               --description=&quot;Glance Image Service&quot;
keystone service-create --name=keystone \
                               --type=identity \
                               --description=&quot;Keystone Identity Service&quot;
keystone service-create --name=swift \
                               --type=object-store \
                               --description=&quot;Swift Service&quot;
</programlisting>
</section>
</section>
<section xml:iddleware">
  <title>Setting Up Middleware</title>
<section xml:iddleware">
    <title>Keystone Auth-Token Middleware</title>
    <para>
      The Keystone auth_token middleware is a WSGI component that can be
      inserted in the WSGI pipeline to handle authenticating tokens with
      Keystone. You can get more details of the middleware in
      middlewarearchitecture_.
    </para>
</section>
<section xml:id="configuring-nova-to-use-keystone">
    <title>Configuring Nova to use Keystone</title>
    <para>
      When configuring Nova, it is important to create a admin service
      token for the service (from the Configuration step above) and
      include that as the key 'admin_token' in Nova's api-paste.ini
      [filter:authtoken] section or in nova.conf [keystone_authtoken]
      section.
    </para>
</section>
<section xml:id="configuring-swift-to-use-keystone">
    <title>Configuring Swift to use Keystone</title>
    <para>
      Similar to Nova, swift can be configured to use Keystone for
      authentication rather than its built in 'tempauth'. Refer to the
      overview_auth documentation in Swift.
    </para>
</section>
<section xml:iddleware-with-username-and-password">
    <title>Auth-Token Middleware with Username and Password</title>
    <para>
      It is also possible to configure Keystone's auth_token middleware
      using the 'admin_user' and 'admin_password' options. When using
      the 'admin_user' and 'admin_password' options the 'admin_token'
      parameter is optional. If 'admin_token' is specified it will by
      used only if the specified token is still valid.
    </para>
    <para>
      Here is an example paste config filter that makes use of the
      'admin_user' and 'admin_password' parameters:
    </para>
    <programlisting>
[filter:authtoken]
paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory
auth_port = 35357
auth_host = 127.0.0.1
auth_token = 012345SECRET99TOKEN012345
admin_user = admin
admin_password = keystone123
</programlisting>
    <para>
      It should be noted that when using this option an admin
      tenant/role relationship is required. The admin user is granted
      access to to the 'Admin' role to the 'admin' tenant.
    </para>
    <para>
      The auth_token middleware can also be configured in nova.conf
      [keystone_authtoken] section to keep paste config clean of
      site-specific parameters:
    </para>
    <programlisting>
[filter:authtoken]
paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory
</programlisting>
    <para>
      and in nova.conf:
    </para>
    <programlisting>
[DEFAULT]
...
auth_strategy=keystone

[keystone_authtoken]
auth_port = 35357
auth_host = 127.0.0.1
admin_user = admin
admin_password = keystone123
</programlisting>
</section>
</section>
</section>
