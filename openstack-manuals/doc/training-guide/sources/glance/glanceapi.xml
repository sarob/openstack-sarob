<?xml version="1.0" encoding="utf-8"?>
  <section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0"
  xml:id="Using-Glance's-Public-APIs">
<title>Using Glance's Public APIs</title>
<section xml:id="page-abstract">
<title>Page Abstract</title>
<para>  Glance fully implements versions 1.0, 1.1 and 2.0 of the OpenStack
  Images API. The Images API specification is developed alongside
  Glance, but is not considered part of the Glance project.
</para>
</section>
<section xml:id="authentication">
  <title>Authentication</title>
  <para>
    Glance depends on Keystone and the OpenStack Identity API to handle
    authentication of clients. You must obtain an authentication token
    from Keystone using and send it along with all API requests to
    Glance through the <literal>X-Auth-Token</literal> header. Glance
    will communicate back to Keystone to verify the token validity and
    obtain your identity credentials.
  </para>
  <para>
    See authentication for more information on integrating with
    Keystone.
  </para>
</section>
<section xml:id="using-v1.x">
  <title>Using v1.X</title>
  <para>
    For the purpose of examples, assume there is a Glance API server
    running at the URL <literal>http://glance.example.com</literal> on
    the default port 80.
  </para>
<section xml:id="list-available-images">
    <title>List Available Images</title>
    <para>
      We want to see a list of available images that the authenticated
      user has access to. This includes images owned by the user, images
      shared with the user and public images.
    </para>
    <para>
      We issue a <literal>GET</literal> request to
      <literal>http://glance.example.com/v1/images</literal> to retrieve
      this list of available images. The data is returned as a
      JSON-encoded mapping in the following format:
    </para>
    <programlisting>
{'images': [
  {'uri': 'http://glance.example.com/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9',
   'name': 'Ubuntu 10.04 Plain',
   'disk_format': 'vhd',
   'container_format': 'ovf',
   'size': '5368709120'}
  ...]}
</programlisting>
</section>
<section xml:id="list-available-images-in-more-detail">
    <title>List Available Images in More Detail</title>
    <para>
      We want to see a more detailed list of available images that the
      authenticated user has access to. This includes images owned by
      the user, images shared with the user and public images.
    </para>
    <para>
      We issue a <literal>GET</literal> request to
      <literal>http://glance.example.com/v1/images/detail</literal> to
      retrieve this list of available images. The data is returned as a
      JSON-encoded mapping in the following format:
    </para>
    <programlisting>
{'images': [
  {'uri': 'http://glance.example.com/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9',
   'name': 'Ubuntu 10.04 Plain 5GB',
   'disk_format': 'vhd',
   'container_format': 'ovf',
   'size': '5368709120',
   'checksum': 'c2e5db72bd7fd153f53ede5da5a06de3',
   'created_at': '2010-02-03 09:34:01',
   'updated_at': '2010-02-03 09:34:01',
   'deleted_at': '',
   'status': 'active',
   'is_public': true,
   'min_ram': 256,
   'min_disk': 5,
   'owner': null,
   'properties': {'distro': 'Ubuntu 10.04 LTS'}},
  ...]}
</programlisting>
    <blockquote>
      <para>
        <emphasis role="strong">note</emphasis>
      </para>
      <para>
        All timestamps returned are in UTC
      </para>
      <para>
        The updated_at timestamp is the timestamp when an image's
        metadata was last updated, not its image data, as all image data
        is immutable once stored in Glance
      </para>
      <para>
        The properties field is a mapping of free-form key/value pairs
        that have been saved with the image metadata
      </para>
      <para>
        The checksum field is an MD5 checksum of the image file data
      </para>
      <para>
        The is_public field is a boolean indicating whether the image is
        publically available
      </para>
      <para>
        The min_ram field is an integer specifying the minimum amount of
        ram needed to run this image on an instance, in megabytes
      </para>
      <para>
        The min_disk field is an integer specifying the minimum amount
        of disk space needed to run this image on an instance, in
        gigabytes
      </para>
      <para>
        The owner field is a string which may either be null or which
        will indicate the owner of the image
      </para>
    </blockquote>
</section>
<section xml:id="filtering-images-lists">
    <title>Filtering Images Lists</title>
    <para>
      Both the <literal>GET /v1/images</literal> and
      <literal>GET /v1/images/detail</literal> requests take query
      parameters that serve to filter the returned list of images. The
      following list details these query parameters.
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>name=NAME</literal>
        </para>
        <para>
          Filters images having a <literal>name</literal> attribute
          matching <literal>NAME</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>container_format=FORMAT</literal>
        </para>
        <para>
          Filters images having a <literal>container_format</literal>
          attribute matching <literal>FORMAT</literal>
        </para>
        <para>
          For more information, see
          About Disk and Container Formats &lt;formats&gt;
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>disk_format=FORMAT</literal>
        </para>
        <para>
          Filters images having a <literal>disk_format</literal>
          attribute matching <literal>FORMAT</literal>
        </para>
        <para>
          For more information, see
          About Disk and Container Formats &lt;formats&gt;
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>status=STATUS</literal>
        </para>
        <para>
          Filters images having a <literal>status</literal> attribute
          matching <literal>STATUS</literal>
        </para>
        <para>
          For more information, see
          About Image Statuses &lt;statuses&gt;
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>size_min=BYTES</literal>
        </para>
        <para>
          Filters images having a <literal>size</literal> attribute
          greater than or equal to <literal>BYTES</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>size_max=BYTES</literal>
        </para>
        <para>
          Filters images having a <literal>size</literal> attribute less
          than or equal to <literal>BYTES</literal>
        </para>
      </listitem>
    </itemizedlist>
    <para>
      These two resources also accept additional query parameters:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>sort_key=KEY</literal>
        </para>
        <para>
          Results will be ordered by the specified image attribute
          <literal>KEY</literal>. Accepted values include
          <literal>id</literal>, <literal>name</literal>,
          <literal>status</literal>, <literal>disk_format</literal>,
          <literal>container_format</literal>, <literal>size</literal>,
          <literal>created_at</literal> (default) and
          <literal>updated_at</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>sort_dir=DIR</literal>
        </para>
        <para>
          Results will be sorted in the direction
          <literal>DIR</literal>. Accepted values are
          <literal>asc</literal> for ascending or
          <literal>desc</literal> (default) for descending.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>marker=ID</literal>
        </para>
        <para>
          An image identifier marker may be specified. When present only
          images which occur after the identifier <literal>ID</literal>
          will be listed, ie the images which have a sort_key later than
          that of the marker <literal>ID</literal> in the sort_dir
          direction.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>limit=LIMIT</literal>
        </para>
        <para>
          When present the maximum number of results returned will not
          exceed <literal>LIMIT</literal>.
        </para>
      </listitem>
    </itemizedlist>
    <blockquote>
      <para>
        <emphasis role="strong">note</emphasis>
      </para>
      <para>
        If the specified <literal>LIMIT</literal> exceeds the operator
        defined limit (api_limit_max) then the number of results
        returned may be less than <literal>LIMIT</literal>.
      </para>
    </blockquote>
    <itemizedlist>
      <listitem>
        <para>
          <literal>is_public=PUBLIC</literal>
        </para>
        <para>
          An admin user may use the is_public parameter to control which
          results are returned.
        </para>
        <para>
          When the is_public parameter is absent or set to True the
          following images will be listed: Images whose is_public field
          is True, owned images and shared images.
        </para>
        <para>
          When the is_public parameter is set to False the following
          images will be listed: Images (owned, shared, or non-owned)
          whose is_public field is False.
        </para>
        <para>
          When the is_public parameter is set to None all images will be
          listed irrespective of owner, shared status or the is_public
          field.
        </para>
      </listitem>
    </itemizedlist>
    <blockquote>
      <para>
        <emphasis role="strong">note</emphasis>
      </para>
      <para>
        Use of the is_public parameter is restricted to admin users. For
        all other users it will be ignored.
      </para>
    </blockquote>
</section>
<section xml:id="retrieve-image-metadata">
    <title>Retrieve Image Metadata</title>
    <para>
      We want to see detailed information for a specific virtual machine
      image that the Glance server knows about.
    </para>
    <para>
      We have queried the Glance server for a list of images and the
      data returned includes the uri field for each available image.
      This uri field value contains the exact location needed to get the
      metadata for a specific image.
    </para>
    <para>
      Continuing the example from above, in order to get metadata about
      the first image returned, we can issue a <literal>HEAD</literal>
      request to the Glance server for the image's URI.
    </para>
    <para>
      We issue a <literal>HEAD</literal> request to
      <literal>http://glance.example.com/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9</literal>
      to retrieve complete metadata for that image. The metadata is
      returned as a set of HTTP headers that begin with the prefix
      <literal>x-image-meta-</literal>. The following shows an example
      of the HTTP headers returned from the above
      <literal>HEAD</literal> request:
    </para>
    <programlisting>
x-image-meta-uri              http://glance.example.com/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9
x-image-meta-name             Ubuntu 10.04 Plain 5GB
x-image-meta-disk_format      vhd
x-image-meta-container_format ovf
x-image-meta-size             5368709120
x-image-meta-checksum         c2e5db72bd7fd153f53ede5da5a06de3
x-image-meta-created_at       2010-02-03 09:34:01
x-image-meta-updated_at       2010-02-03 09:34:01
x-image-meta-deleted_at
x-image-meta-status           available
x-image-meta-is_public        true
x-image-meta-min_ram          256
x-image-meta-min_disk         0
x-image-meta-owner            null
x-image-meta-property-distro  Ubuntu 10.04 LTS
</programlisting>
    <blockquote>
      <para>
        <emphasis role="strong">note</emphasis>
      </para>
      <para>
        All timestamps returned are in UTC
      </para>
      <para>
        The x-image-meta-updated_at timestamp is the timestamp when an
        image's metadata was last updated, not its image data, as all
        image data is immutable once stored in Glance
      </para>
      <para>
        There may be multiple headers that begin with the prefix
        x-image-meta-property-. These headers are free-form key/value
        pairs that have been saved with the image metadata. The key is
        the string after x-image-meta-property- and the value is the
        value of the header
      </para>
      <para>
        The response's ETag header will always be equal to the
        x-image-meta-checksum value
      </para>
      <para>
        The response's x-image-meta-is_public value is a boolean
        indicating whether the image is publically available
      </para>
      <para>
        The response's x-image-meta-owner value is a string which may
        either be null or which will indicate the owner of the image
      </para>
    </blockquote>
</section>
<section xml:id="retrieve-raw-image-data">
    <title>Retrieve Raw Image Data</title>
    <para>
      We want to retrieve that actual raw data for a specific virtual
      machine image that the Glance server knows about.
    </para>
    <para>
      We have queried the Glance server for a list of images and the
      data returned includes the uri field for each available image.
      This uri field value contains the exact location needed to get the
      metadata for a specific image.
    </para>
    <para>
      Continuing the example from above, in order to get metadata about
      the first image returned, we can issue a <literal>HEAD</literal>
      request to the Glance server for the image's URI.
    </para>
    <para>
      We issue a <literal>GET</literal> request to
      <literal>http://glance.example.com/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9</literal>
      to retrieve metadata for that image as well as the image itself
      encoded into the response body.
    </para>
    <para>
      The metadata is returned as a set of HTTP headers that begin with
      the prefix <literal>x-image-meta-</literal>. The following shows
      an example of the HTTP headers returned from the above
      <literal>GET</literal> request:
    </para>
    <programlisting>
x-image-meta-uri              http://glance.example.com/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9
x-image-meta-name             Ubuntu 10.04 Plain 5GB
x-image-meta-disk_format      vhd
x-image-meta-container_format ovf
x-image-meta-size             5368709120
x-image-meta-checksum         c2e5db72bd7fd153f53ede5da5a06de3
x-image-meta-created_at       2010-02-03 09:34:01
x-image-meta-updated_at       2010-02-03 09:34:01
x-image-meta-deleted_at
x-image-meta-status           available
x-image-meta-is_public        true
x-image-meta-min_ram          256
x-image-meta-min_disk         5
x-image-meta-owner            null
x-image-meta-property-distro  Ubuntu 10.04 LTS
</programlisting>
    <blockquote>
      <para>
        <emphasis role="strong">note</emphasis>
      </para>
      <para>
        All timestamps returned are in UTC
      </para>
      <para>
        The x-image-meta-updated_at timestamp is the timestamp when an
        image's metadata was last updated, not its image data, as all
        image data is immutable once stored in Glance
      </para>
      <para>
        There may be multiple headers that begin with the prefix
        x-image-meta-property-. These headers are free-form key/value
        pairs that have been saved with the image metadata. The key is
        the string after x-image-meta-property- and the value is the
        value of the header
      </para>
      <para>
        The response's Content-Length header shall be equal to the value
        of the x-image-meta-size header
      </para>
      <para>
        The response's ETag header will always be equal to the
        x-image-meta-checksum value
      </para>
      <para>
        The response's x-image-meta-is_public value is a boolean
        indicating whether the image is publically available
      </para>
      <para>
        The response's x-image-meta-owner value is a string which may
        either be null or which will indicate the owner of the image
      </para>
      <para>
        The image data itself will be the body of the HTTP response
        returned from the request, which will have content-type of
        application/octet-stream.
      </para>
    </blockquote>
</section>
<section xml:id="add-a-new-image">
    <title>Add a New Image</title>
    <para>
      We have created a new virtual machine image in some way (created a
      &quot;golden image&quot; or snapshotted/backed up an existing
      image) and we wish to do two things:
    </para>
    <blockquote>
      <itemizedlist>
        <listitem>
          <para>
            Store the disk image data in Glance
          </para>
        </listitem>
        <listitem>
          <para>
            Store metadata about this image in Glance
          </para>
        </listitem>
      </itemizedlist>
    </blockquote>
    <para>
      We can do the above two activities in a single call to the Glance
      API. Assuming, like in the examples above, that a Glance API
      server is running at <literal>glance.example.com</literal>, we
      issue a <literal>POST</literal> request to add an image to Glance:
    </para>
    <programlisting>
POST http://glance.example.com/v1/images
</programlisting>
    <para>
      The metadata about the image is sent to Glance in HTTP headers.
      The body of the HTTP request to the Glance API will be the
      MIME-encoded disk image data.
    </para>
</section>
<section xml:id="reserve-a-new-image">
    <title>Reserve a New Image</title>
    <para>
      We can also perform the activities described in Add a New Image_
      using two separate calls to the Image API; the first to register
      the image metadata, and the second to add the image disk data.
      This is known as &quot;reserving&quot; an image.
    </para>
    <para>
      The first call should be a <literal>POST</literal> to
      <literal>http://glance.example.com/v1/images</literal>, which will
      result in a new image id being registered with a status of
      <literal>queued</literal>:
    </para>
    <programlisting>
{&quot;image&quot;:
 {&quot;status&quot;: &quot;queued&quot;,
  &quot;id&quot;: &quot;71c675ab-d94f-49cd-a114-e12490b328d9&quot;,
  ...}
 ...}
</programlisting>
    <para>
      The image data can then be added using a <literal>PUT</literal> to
      <literal>http://glance.example.com/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9</literal>.
      The image status will then be set to <literal>active</literal> by
      Glance.
    </para>
    <para>
      <emphasis role="strong">Image Metadata in HTTP Headers</emphasis>
    </para>
    <para>
      Glance will view as image metadata any HTTP header that it
      receives in a <literal>POST</literal> request where the header key
      is prefixed with the strings <literal>x-image-meta-</literal> and
      <literal>x-image-meta-property-</literal>.
    </para>
    <para>
      The list of metadata headers that Glance accepts are listed below.
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>x-image-meta-name</literal>
        </para>
        <para>
          This header is required, unless reserving an image. Its value
          should be the name of the image.
        </para>
        <para>
          Note that the name of an image <emphasis>is not unique to a
          Glance node</emphasis>. It would be an unrealistic expectation
          of users to know all the unique names of all other user's
          images.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>x-image-meta-id</literal>
        </para>
        <para>
          This header is optional.
        </para>
        <para>
          When present, Glance will use the supplied identifier for the
          image. If the identifier already exists in that Glance node,
          then a <emphasis role="strong">409 Conflict</emphasis> will be
          returned by Glance. The value of the header must be a uuid in
          hexadecimal string notation (i.e.
          71c675ab-d94f-49cd-a114-e12490b328d9).
        </para>
        <para>
          When this header is <emphasis>not</emphasis> present, Glance
          will generate an identifier for the image and return this
          identifier in the response (see below)
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>x-image-meta-store</literal>
        </para>
        <para>
          This header is optional. Valid values are one of
          <literal>file</literal>, <literal>s3</literal>,
          <literal>rbd</literal>, <literal>swift</literal>,
          <literal>cinder</literal>, <literal>gridfs</literal> or
          <literal>sheepdog</literal>
        </para>
        <para>
          When present, Glance will attempt to store the disk image data
          in the backing store indicated by the value of the header. If
          the Glance node does not support the backing store, Glance
          will return a <emphasis role="strong">400 Bad
          Request</emphasis>.
        </para>
        <para>
          When not present, Glance will store the disk image data in the
          backing store that is marked default. See the configuration
          option <literal>default_store</literal> for more information.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>x-image-meta-disk_format</literal>
        </para>
        <para>
          This header is required, unless reserving an image. Valid
          values are one of <literal>aki</literal>,
          <literal>ari</literal>, <literal>ami</literal>,
          <literal>raw</literal>, <literal>iso</literal>,
          <literal>vhd</literal>, <literal>vdi</literal>,
          <literal>qcow2</literal>, or <literal>vmdk</literal>.
        </para>
        <para>
          For more information, see
          About Disk and Container Formats &lt;formats&gt;
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>x-image-meta-container_format</literal>
        </para>
        <para>
          This header is required, unless reserving an image. Valid
          values are one of <literal>aki</literal>,
          <literal>ari</literal>, <literal>ami</literal>,
          <literal>bare</literal>, or <literal>ovf</literal>.
        </para>
        <para>
          For more information, see
          About Disk and Container Formats &lt;formats&gt;
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>x-image-meta-size</literal>
        </para>
        <para>
          This header is optional.
        </para>
        <para>
          When present, Glance assumes that the expected size of the
          request body will be the value of this header. If the length
          in bytes of the request body <emphasis>does not
          match</emphasis> the value of this header, Glance will return
          a <emphasis role="strong">400 Bad Request</emphasis>.
        </para>
        <para>
          When not present, Glance will calculate the image's size based
          on the size of the request body.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>x-image-meta-checksum</literal>
        </para>
        <para>
          This header is optional. When present it shall be the expected
          <emphasis role="strong">MD5</emphasis> checksum of the image
          file data.
        </para>
        <para>
          When present, Glance will verify the checksum generated from
          the backend store when storing your image against this value
          and return a <emphasis role="strong">400 Bad
          Request</emphasis> if the values do not match.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>x-image-meta-is_public</literal>
        </para>
        <para>
          This header is optional.
        </para>
        <para>
          When Glance finds the string &quot;true&quot;
          (case-insensitive), the image is marked as a public image,
          meaning that any user may view its metadata and may read the
          disk image from Glance.
        </para>
        <para>
          When not present, the image is assumed to be <emphasis>not
          public</emphasis> and owned by a user.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>x-image-meta-min_ram</literal>
        </para>
        <para>
          This header is optional. When present it shall be the expected
          minimum ram required in megabytes to run this image on a
          server.
        </para>
        <para>
          When not present, the image is assumed to have a minimum ram
          requirement of 0.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>x-image-meta-min_disk</literal>
        </para>
        <para>
          This header is optional. When present it shall be the expected
          minimum disk space required in gigabytes to run this image on
          a server.
        </para>
        <para>
          When not present, the image is assumed to have a minimum disk
          space requirement of 0.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>x-image-meta-owner</literal>
        </para>
        <para>
          This header is optional and only meaningful for admins.
        </para>
        <para>
          Glance normally sets the owner of an image to be the tenant or
          user (depending on the &quot;owner_is_tenant&quot;
          configuration option) of the authenticated user issuing the
          request. However, if the authenticated user has the Admin
          role, this default may be overridden by setting this header to
          null or to a string identifying the owner of the image.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>x-image-meta-property-*</literal>
        </para>
        <para>
          When Glance receives any HTTP header whose key begins with the
          string prefix <literal>x-image-meta-property-</literal>,
          Glance adds the key and value to a set of custom, free-form
          image properties stored with the image. The key is the
          lower-cased string following the prefix
          <literal>x-image-meta-property-</literal> with dashes and
          punctuation replaced with underscores.
        </para>
        <para>
          For example, if the following HTTP header were sent:
        </para>
        <programlisting>
x-image-meta-property-distro  Ubuntu 10.10
</programlisting>
        <para>
          Then a key/value pair of &quot;distro&quot;/&quot;Ubuntu
          10.10&quot; will be stored with the image in Glance.
        </para>
        <para>
          There is no limit on the number of free-form key/value
          attributes that can be attached to the image. However, keep in
          mind that the 8K limit on the size of all HTTP headers sent in
          a request will effectively limit the number of image
          properties.
        </para>
      </listitem>
    </itemizedlist>
</section>
<section xml:id="update-an-image">
    <title>Update an Image</title>
    <para>
      Glance will view as image metadata any HTTP header that it
      receives in a <literal>PUT</literal> request where the header key
      is prefixed with the strings <literal>x-image-meta-</literal> and
      <literal>x-image-meta-property-</literal>.
    </para>
    <para>
      If an image was previously reserved, and thus is in the
      <literal>queued</literal> state, then image data can be added by
      including it as the request body. If the image already as data
      associated with it (e.g. not in the <literal>queued</literal>
      state), then including a request body will result in a
      <emphasis role="strong">409 Conflict</emphasis> exception.
    </para>
    <para>
      On success, the <literal>PUT</literal> request will return the
      image metadata encoded as HTTP headers.
    </para>
    <para>
      See more about image statuses here:
      Image Statuses &lt;statuses&gt;
    </para>
</section>
<section xml:id="list-image-memberships">
    <title>List Image Memberships</title>
    <para>
      We want to see a list of the other system tenants (or users, if
      &quot;owner_is_tenant&quot; is False) that may access a given
      virtual machine image that the Glance server knows about. We take
      the uri field of the image data, append
      <literal>/members</literal> to it, and issue a
      <literal>GET</literal> request on the resulting URL.
    </para>
    <para>
      Continuing from the example above, in order to get the memberships
      for the first image returned, we can issue a
      <literal>GET</literal> request to the Glance server for
      <literal>http://glance.example.com/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9/members</literal>
      . What we will get back is JSON data such as the following:
    </para>
    <programlisting>
{'members': [
 {'member_id': 'tenant1',
  'can_share': false}
 ...]}
</programlisting>
    <para>
      The member_id field identifies a tenant with which the image is
      shared. If that tenant is authorized to further share the image,
      the can_share field is true.
    </para>
</section>
<section xml:id="list-shared-images">
    <title>List Shared Images</title>
    <para>
      We want to see a list of images which are shared with a given
      tenant. We issue a <literal>GET</literal> request to
      <literal>http://glance.example.com/v1/shared-images/tenant1</literal>.
      We will get back JSON data such as the following:
    </para>
    <programlisting>
{'shared_images': [
 {'image_id': '71c675ab-d94f-49cd-a114-e12490b328d9',
  'can_share': false}
 ...]}
</programlisting>
    <para>
      The image_id field identifies an image shared with the tenant
      named by <emphasis>member_id</emphasis>. If the tenant is
      authorized to further share the image, the can_share field is
      true.
    </para>
</section>
<section xml:id="add-a-member-to-an-image">
    <title>Add a Member to an Image</title>
    <para>
      We want to authorize a tenant to access a private image. We issue
      a <literal>PUT</literal> request to
      <literal>http://glance.example.com/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9/members/tenant1</literal>
      . With no body, this will add the membership to the image, leaving
      existing memberships unmodified and defaulting new memberships to
      have can_share set to false. We may also optionally attach a body
      of the following form:
    </para>
    <programlisting>
{'member':
 {'can_share': true}
}
</programlisting>
    <para>
      If such a body is provided, both existing and new memberships will
      have can_share set to the provided value (either true or false).
      This query will return a 204 (&quot;No Content&quot;) status code.
    </para>
</section>
<section xml:id="remove-a-member-from-an-image">
    <title>Remove a Member from an Image</title>
    <para>
      We want to revoke a tenant's right to access a private image. We
      issue a <literal>DELETE</literal> request to
      <literal>http://glance.example.com/v1/images/1/members/tenant1</literal>.
      This query will return a 204 (&quot;No Content&quot;) status code.
    </para>
</section>
<section xml:id="replace-a-membership-list-for-an-image">
    <title>Replace a Membership List for an Image</title>
    <para>
      The full membership list for a given image may be replaced. We
      issue a <literal>PUT</literal> request to
      <literal>http://glance.example.com/v1/images/71c675ab-d94f-49cd-a114-e12490b328d9/members</literal>
      with a body of the following form:
    </para>
    <programlisting>
{'memberships': [
 {'member_id': 'tenant1',
  'can_share': false}
 ...]}
</programlisting>
    <para>
      All existing memberships which are not named in the replacement
      body are removed, and those which are named have their can_share
      settings changed as specified. (The can_share setting may be
      omitted, which will cause that setting to remain unchanged in the
      existing memberships.) All new memberships will be created, with
      can_share defaulting to false if it is not specified.
    </para>
</section>
</section>
<section xml:id="image-membership-changes-in-version-2.0">
  <title>Image Membership Changes in Version 2.0</title>
  <para>
    Version 2.0 of the Images API eliminates the
    <literal>can_share</literal> attribute of image membership. In the
    version 2.0 model, image sharing is not transitive.
  </para>
  <para>
    In version 2.0, image members have a <literal>status</literal>
    attribute that reflects how the image should be treated with respect
    to that image member's image list.
  </para>
  <itemizedlist>
    <listitem>
      <para>
        The <literal>status</literal> attribute may have one of three
        values: <literal>pending</literal>, <literal>accepted</literal>,
        or <literal>rejected</literal>.
      </para>
    </listitem>
    <listitem>
      <para>
        By default, only those shared images with status
        <literal>accepted</literal> are included in an image member's
        image-list.
      </para>
    </listitem>
    <listitem>
      <para>
        Only an image member may change his/her own membership status.
      </para>
    </listitem>
    <listitem>
      <para>
        Only an image owner may create members on an image. The status
        of a newly created image member is <literal>pending</literal>.
        The image owner cannot change the status of a member.
      </para>
    </listitem>
  </itemizedlist>
<section xml:id="distinctions-from-version-1.x-api-calls">
    <title>Distinctions from Version 1.x API Calls</title>
    <itemizedlist>
      <listitem>
        <para>
          The response to a request to list the members of an image has
          changed.
        </para>
        <para>
          call: <literal>GET</literal> on
          <literal>/v2/images/{imageId}/members</literal>
        </para>
        <para>
          response: see the JSON schema at
          <literal>/v2/schemas/members</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          The request body in the call to create an image member has
          changed.
        </para>
        <para>
          call: <literal>POST</literal> to
          <literal>/v2/images/{imageId}/members</literal>
        </para>
        <para>
          request body:
        </para>
        <para>
          { &quot;member&quot;: &quot;&lt;MEMBER_ID&gt;&quot; }
        </para>
        <para>
          where the {memberId} is the tenant ID of the image member.
        </para>
        <para>
          The member status of a newly created image member is
          <literal>pending</literal>.
        </para>
      </listitem>
    </itemizedlist>
</section>
<section xml:id="new-api-calls">
    <title>New API Calls</title>
    <itemizedlist>
      <listitem>
        <para>
          Change the status of an image member
        </para>
        <para>
          call: <literal>PUT</literal> on
          <literal>/v2/images/{imageId}/members/{memberId}</literal>
        </para>
        <para>
          request body:
        </para>
        <para>
          { &quot;status&quot;: &quot;&lt;STATUS_VALUE&gt;&quot; }
        </para>
        <para>
          where &lt;STATUS_VALUE&gt; is one of
          <literal>pending</literal>, <literal>accepted</literal>, or
          <literal>rejected</literal>. The {memberId} is the tenant ID
          of the image member.
        </para>
      </listitem>
    </itemizedlist>
</section>
</section>
</section>
